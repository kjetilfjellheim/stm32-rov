
stm32-interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004878  08004878  00014878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004898  08004898  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004898  08004898  00014898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048a0  080048a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a0  080048a0  000148a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048a4  080048a4  000148a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080048a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  2000000c  080048b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080048b4  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af23  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a84  00000000  00000000  0002af5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002c9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002d350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001549a  00000000  00000000  0002dc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae30  00000000  00000000  000430ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086f3c  00000000  00000000  0004deea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4e26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000274c  00000000  00000000  000d4e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004860 	.word	0x08004860

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004860 	.word	0x08004860

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b5b0      	push	{r4, r5, r7, lr}
 8000d1a:	b090      	sub	sp, #64	; 0x40
 8000d1c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1e:	f001 f81f 	bl	8001d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d22:	f000 f845 	bl	8000db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d26:	f000 f9a1 	bl	800106c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d2a:	f000 f961 	bl	8000ff0 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8000d2e:	f000 f935 	bl	8000f9c <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 8000d32:	f000 f8df 	bl	8000ef4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d36:	f000 f907 	bl	8000f48 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000d3a:	f000 f8a5 	bl	8000e88 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart6, sen0386_buffer, SEN0386_READ_BUFFER_SIZE);
 8000d3e:	2264      	movs	r2, #100	; 0x64
 8000d40:	4919      	ldr	r1, [pc, #100]	; (8000da8 <main+0x90>)
 8000d42:	481a      	ldr	r0, [pc, #104]	; (8000dac <main+0x94>)
 8000d44:	f002 fc9e 	bl	8003684 <HAL_UART_Receive_DMA>
  while (1)
  {
	  /**
	   * Normal flow
	   */
	  Sen0386Data sen0386 = getSensorData();
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fa76 	bl	800123c <getSensorData>
	  if (isInitialized(sen0386)) {
 8000d50:	466d      	mov	r5, sp
 8000d52:	f107 0414 	add.w	r4, r7, #20
 8000d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	602b      	str	r3, [r5, #0]
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d62:	f000 fa03 	bl	800116c <isInitialized>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0ed      	beq.n	8000d48 <main+0x30>
		  if (!hasCurrentCommand()) {
 8000d6c:	f000 fa8a 	bl	8001284 <hasCurrentCommand>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <main+0x62>
			  setNextCommand();
 8000d76:	f000 fa8d 	bl	8001294 <setNextCommand>
		  }
		  sendLog();
 8000d7a:	f000 fa92 	bl	80012a2 <sendLog>
		  if (hasCurrentCommand()) {
 8000d7e:	f000 fa81 	bl	8001284 <hasCurrentCommand>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0df      	beq.n	8000d48 <main+0x30>
			 if (!hasCommandStarted()) {
 8000d88:	f000 fa92 	bl	80012b0 <hasCommandStarted>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <main+0x7e>
				 startCommand();
 8000d92:	f000 fa95 	bl	80012c0 <startCommand>
			 }
			 if (isCommandCompleted()) {
 8000d96:	f000 fa9a 	bl	80012ce <isCommandCompleted>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d0d3      	beq.n	8000d48 <main+0x30>
				 endCommand();
 8000da0:	f000 fa9d 	bl	80012de <endCommand>
  {
 8000da4:	e7d0      	b.n	8000d48 <main+0x30>
 8000da6:	bf00      	nop
 8000da8:	2000026c 	.word	0x2000026c
 8000dac:	20000108 	.word	0x20000108

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b094      	sub	sp, #80	; 0x50
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	2230      	movs	r2, #48	; 0x30
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 fd46 	bl	8004850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <SystemClock_Config+0xd0>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	4a28      	ldr	r2, [pc, #160]	; (8000e80 <SystemClock_Config+0xd0>)
 8000dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de2:	6413      	str	r3, [r2, #64]	; 0x40
 8000de4:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <SystemClock_Config+0xd0>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000df0:	2300      	movs	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <SystemClock_Config+0xd4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dfc:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <SystemClock_Config+0xd4>)
 8000dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <SystemClock_Config+0xd4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e10:	2302      	movs	r3, #2
 8000e12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e14:	2301      	movs	r3, #1
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e18:	2310      	movs	r3, #16
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e24:	2310      	movs	r3, #16
 8000e26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e2e:	2304      	movs	r3, #4
 8000e30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e32:	2307      	movs	r3, #7
 8000e34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e36:	f107 0320 	add.w	r3, r7, #32
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 feb4 	bl	8002ba8 <HAL_RCC_OscConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e46:	f000 fa51 	bl	80012ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4a:	230f      	movs	r3, #15
 8000e4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	2102      	movs	r1, #2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f002 f916 	bl	8003098 <HAL_RCC_ClockConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e72:	f000 fa3b 	bl	80012ec <Error_Handler>
  }
}
 8000e76:	bf00      	nop
 8000e78:	3750      	adds	r7, #80	; 0x50
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40007000 	.word	0x40007000

08000e88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_SPI2_Init+0x64>)
 8000e8e:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <MX_SPI2_Init+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_SPI2_Init+0x64>)
 8000e94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_SPI2_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_SPI2_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_SPI2_Init+0x64>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_SPI2_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_SPI2_Init+0x64>)
 8000eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_SPI2_Init+0x64>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <MX_SPI2_Init+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_SPI2_Init+0x64>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <MX_SPI2_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_SPI2_Init+0x64>)
 8000ed4:	220a      	movs	r2, #10
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <MX_SPI2_Init+0x64>)
 8000eda:	f002 fafd 	bl	80034d8 <HAL_SPI_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ee4:	f000 fa02 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000028 	.word	0x20000028
 8000ef0:	40003800 	.word	0x40003800

08000ef4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <MX_USART1_UART_Init+0x50>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f2c:	f002 fb5d 	bl	80035ea <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f36:	f000 f9d9 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000080 	.word	0x20000080
 8000f44:	40011000 	.word	0x40011000

08000f48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <MX_USART2_UART_Init+0x50>)
 8000f50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f80:	f002 fb33 	bl	80035ea <HAL_UART_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f8a:	f000 f9af 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200000c4 	.word	0x200000c4
 8000f98:	40004400 	.word	0x40004400

08000f9c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_USART6_UART_Init+0x4c>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <MX_USART6_UART_Init+0x50>)
 8000fa4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <MX_USART6_UART_Init+0x4c>)
 8000fa8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_USART6_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_USART6_UART_Init+0x4c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <MX_USART6_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_USART6_UART_Init+0x4c>)
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <MX_USART6_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <MX_USART6_UART_Init+0x4c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_USART6_UART_Init+0x4c>)
 8000fd4:	f002 fb09 	bl	80035ea <HAL_UART_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000fde:	f000 f985 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000108 	.word	0x20000108
 8000fec:	40011400 	.word	0x40011400

08000ff0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <MX_DMA_Init+0x78>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <MX_DMA_Init+0x78>)
 8001000:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_DMA_Init+0x78>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_DMA_Init+0x78>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a13      	ldr	r2, [pc, #76]	; (8001068 <MX_DMA_Init+0x78>)
 800101c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_DMA_Init+0x78>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2010      	movs	r0, #16
 8001034:	f000 ffe1 	bl	8001ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001038:	2010      	movs	r0, #16
 800103a:	f000 fffa 	bl	8002032 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	2039      	movs	r0, #57	; 0x39
 8001044:	f000 ffd9 	bl	8001ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001048:	2039      	movs	r0, #57	; 0x39
 800104a:	f000 fff2 	bl	8002032 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	203a      	movs	r0, #58	; 0x3a
 8001054:	f000 ffd1 	bl	8001ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001058:	203a      	movs	r0, #58	; 0x3a
 800105a:	f000 ffea 	bl	8002032 <HAL_NVIC_EnableIRQ>

}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800

0800106c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b2d      	ldr	r3, [pc, #180]	; (800113c <MX_GPIO_Init+0xd0>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a2c      	ldr	r2, [pc, #176]	; (800113c <MX_GPIO_Init+0xd0>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b2a      	ldr	r3, [pc, #168]	; (800113c <MX_GPIO_Init+0xd0>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b26      	ldr	r3, [pc, #152]	; (800113c <MX_GPIO_Init+0xd0>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a25      	ldr	r2, [pc, #148]	; (800113c <MX_GPIO_Init+0xd0>)
 80010a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b23      	ldr	r3, [pc, #140]	; (800113c <MX_GPIO_Init+0xd0>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <MX_GPIO_Init+0xd0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a1e      	ldr	r2, [pc, #120]	; (800113c <MX_GPIO_Init+0xd0>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <MX_GPIO_Init+0xd0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <MX_GPIO_Init+0xd0>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a17      	ldr	r2, [pc, #92]	; (800113c <MX_GPIO_Init+0xd0>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <MX_GPIO_Init+0xd0>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2120      	movs	r1, #32
 80010f6:	4812      	ldr	r0, [pc, #72]	; (8001140 <MX_GPIO_Init+0xd4>)
 80010f8:	f001 fd3c 	bl	8002b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001102:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	480c      	ldr	r0, [pc, #48]	; (8001144 <MX_GPIO_Init+0xd8>)
 8001114:	f001 fbaa 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001118:	2320      	movs	r3, #32
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	2301      	movs	r3, #1
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	4804      	ldr	r0, [pc, #16]	; (8001140 <MX_GPIO_Init+0xd4>)
 8001130:	f001 fb9c 	bl	800286c <HAL_GPIO_Init>

}
 8001134:	bf00      	nop
 8001136:	3728      	adds	r7, #40	; 0x28
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000
 8001144:	40020800 	.word	0x40020800

08001148 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart6, sen0386_buffer, SEN0386_READ_BUFFER_SIZE);
 8001150:	2264      	movs	r2, #100	; 0x64
 8001152:	4904      	ldr	r1, [pc, #16]	; (8001164 <HAL_UART_RxCpltCallback+0x1c>)
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <HAL_UART_RxCpltCallback+0x20>)
 8001156:	f002 fa95 	bl	8003684 <HAL_UART_Receive_DMA>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2000026c 	.word	0x2000026c
 8001168:	20000108 	.word	0x20000108

0800116c <isInitialized>:

bool isInitialized(Sen0386Data sen0386) {
 800116c:	b084      	sub	sp, #16
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	f107 0c10 	add.w	ip, r7, #16
 8001178:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	bool isInitialized = false;
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
	if (sen0386.acceleration.accXData != SEN0386_UNDEDFINED &&
 8001180:	edd7 7a04 	vldr	s15, [r7, #16]
 8001184:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001238 <isInitialized+0xcc>
 8001188:	eef4 7a47 	vcmp.f32	s15, s14
 800118c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001190:	d049      	beq.n	8001226 <isInitialized+0xba>
			sen0386.acceleration.accYData != SEN0386_UNDEDFINED &&
 8001192:	edd7 7a05 	vldr	s15, [r7, #20]
	if (sen0386.acceleration.accXData != SEN0386_UNDEDFINED &&
 8001196:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001238 <isInitialized+0xcc>
 800119a:	eef4 7a47 	vcmp.f32	s15, s14
 800119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a2:	d040      	beq.n	8001226 <isInitialized+0xba>
			sen0386.acceleration.accZData != SEN0386_UNDEDFINED &&
 80011a4:	edd7 7a06 	vldr	s15, [r7, #24]
			sen0386.acceleration.accYData != SEN0386_UNDEDFINED &&
 80011a8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001238 <isInitialized+0xcc>
 80011ac:	eef4 7a47 	vcmp.f32	s15, s14
 80011b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b4:	d037      	beq.n	8001226 <isInitialized+0xba>
			sen0386.angle.pitch != SEN0386_UNDEDFINED &&
 80011b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
			sen0386.acceleration.accZData != SEN0386_UNDEDFINED &&
 80011ba:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001238 <isInitialized+0xcc>
 80011be:	eef4 7a47 	vcmp.f32	s15, s14
 80011c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c6:	d02e      	beq.n	8001226 <isInitialized+0xba>
			sen0386.angle.roll != SEN0386_UNDEDFINED &&
 80011c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
			sen0386.angle.pitch != SEN0386_UNDEDFINED &&
 80011cc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001238 <isInitialized+0xcc>
 80011d0:	eef4 7a47 	vcmp.f32	s15, s14
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d8:	d025      	beq.n	8001226 <isInitialized+0xba>
			sen0386.angle.yaw != SEN0386_UNDEDFINED &&
 80011da:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
			sen0386.angle.roll != SEN0386_UNDEDFINED &&
 80011de:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001238 <isInitialized+0xcc>
 80011e2:	eef4 7a47 	vcmp.f32	s15, s14
 80011e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ea:	d01c      	beq.n	8001226 <isInitialized+0xba>
			sen0386.angularVelocity.angleVelX != SEN0386_UNDEDFINED &&
 80011ec:	edd7 7a07 	vldr	s15, [r7, #28]
			sen0386.angle.yaw != SEN0386_UNDEDFINED &&
 80011f0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001238 <isInitialized+0xcc>
 80011f4:	eef4 7a47 	vcmp.f32	s15, s14
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	d013      	beq.n	8001226 <isInitialized+0xba>
			sen0386.angularVelocity.angleVelY != SEN0386_UNDEDFINED &&
 80011fe:	edd7 7a08 	vldr	s15, [r7, #32]
			sen0386.angularVelocity.angleVelX != SEN0386_UNDEDFINED &&
 8001202:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001238 <isInitialized+0xcc>
 8001206:	eef4 7a47 	vcmp.f32	s15, s14
 800120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120e:	d00a      	beq.n	8001226 <isInitialized+0xba>
			sen0386.angularVelocity.angleVelZ != SEN0386_UNDEDFINED) {
 8001210:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
			sen0386.angularVelocity.angleVelY != SEN0386_UNDEDFINED &&
 8001214:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001238 <isInitialized+0xcc>
 8001218:	eef4 7a47 	vcmp.f32	s15, s14
 800121c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001220:	d001      	beq.n	8001226 <isInitialized+0xba>
		isInitialized = true;
 8001222:	2301      	movs	r3, #1
 8001224:	607b      	str	r3, [r7, #4]
	}
	return isInitialized;
 8001226:	687b      	ldr	r3, [r7, #4]
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	b004      	add	sp, #16
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	cb18967f 	.word	0xcb18967f

0800123c <getSensorData>:
/**
 * Generate sen0386 asensor data
 */
Sen0386Data getSensorData() {
 800123c:	b5b0      	push	{r4, r5, r7, lr}
 800123e:	b0a4      	sub	sp, #144	; 0x90
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	  uint8_t copied_sen0386_buffer[SEN0386_READ_BUFFER_SIZE];
	  memcpy(copied_sen0386_buffer, sen0386_buffer, SEN0386_READ_BUFFER_SIZE);
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <getSensorData+0x44>)
 8001246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124a:	4611      	mov	r1, r2
 800124c:	2264      	movs	r2, #100	; 0x64
 800124e:	4618      	mov	r0, r3
 8001250:	f003 faf0 	bl	8004834 <memcpy>
	  Sen0386Data sen0386 = getSensorInput(copied_sen0386_buffer);
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fabc 	bl	80017dc <getSensorInput>
	  return sen0386;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	461d      	mov	r5, r3
 8001268:	f107 0408 	add.w	r4, r7, #8
 800126c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	602b      	str	r3, [r5, #0]
}
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	3790      	adds	r7, #144	; 0x90
 800127c:	46bd      	mov	sp, r7
 800127e:	bdb0      	pop	{r4, r5, r7, pc}
 8001280:	2000026c 	.word	0x2000026c

08001284 <hasCurrentCommand>:

bool hasCommandAvailable() {
	return false;
}

bool hasCurrentCommand() {
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	return false;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <setNextCommand>:

void setNextCommand() {
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <sendLog>:

void sendLog() {
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <hasCommandStarted>:

bool hasCommandStarted() {
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
	return false;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <startCommand>:

void startCommand() {
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <isCommandCompleted>:

bool isCommandCompleted() {
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
	return false;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <endCommand>:

void endCommand() {
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <Error_Handler+0x8>

080012f6 <getPacketStart>:

short convertBytes(uint8_t highByte, uint8_t lowByte) {
	return (short)highByte<<lowByte;
}

int getPacketStart(uint8_t* data, uint8_t packetHeader) {
 80012f6:	b480      	push	{r7}
 80012f8:	b085      	sub	sp, #20
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	70fb      	strb	r3, [r7, #3]
	for (int index = 0; index < SEN0386_READ_BUFFER_SIZE; index++) {
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	e013      	b.n	8001330 <getPacketStart+0x3a>
		if (data[index]==SEN0386_PACKET_HEADER && data[index+1]==packetHeader) {
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2255      	movs	r2, #85	; 0x55
 8001312:	4293      	cmp	r3, r2
 8001314:	d109      	bne.n	800132a <getPacketStart+0x34>
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3301      	adds	r3, #1
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	78fa      	ldrb	r2, [r7, #3]
 8001322:	429a      	cmp	r2, r3
 8001324:	d101      	bne.n	800132a <getPacketStart+0x34>
			return index;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	e007      	b.n	800133a <getPacketStart+0x44>
	for (int index = 0; index < SEN0386_READ_BUFFER_SIZE; index++) {
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3301      	adds	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b63      	cmp	r3, #99	; 0x63
 8001334:	dde8      	ble.n	8001308 <getPacketStart+0x12>
		}
	}
	return NOT_FOUND;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <getShort>:

short getShort(uint8_t highByte, uint8_t lowByte) {
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	460a      	mov	r2, r1
 8001350:	71fb      	strb	r3, [r7, #7]
 8001352:	4613      	mov	r3, r2
 8001354:	71bb      	strb	r3, [r7, #6]
	return (short)((highByte << 8) | lowByte);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	79bb      	ldrb	r3, [r7, #6]
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b21b      	sxth	r3, r3
}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <getAccelerations>:

Acceleration getAccelerations(uint8_t* data) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b08e      	sub	sp, #56	; 0x38
 8001374:	af00      	add	r7, sp, #0
 8001376:	6178      	str	r0, [r7, #20]
	Acceleration acceleration;
	int packetStart = getPacketStart(data, SEN0386_HEADERACC);
 8001378:	2351      	movs	r3, #81	; 0x51
 800137a:	4619      	mov	r1, r3
 800137c:	6978      	ldr	r0, [r7, #20]
 800137e:	f7ff ffba 	bl	80012f6 <getPacketStart>
 8001382:	6378      	str	r0, [r7, #52]	; 0x34
	if (packetStart != NOT_FOUND) {
 8001384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138a:	f000 809a 	beq.w	80014c2 <getAccelerations+0x152>
		acceleration.accXData = (getShort(data[SEN0386_XH + packetStart], data[SEN0386_XL + packetStart]) / 32768.0) * 16.0 * 9.8;
 800138e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001390:	3303      	adds	r3, #3
 8001392:	461a      	mov	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	4413      	add	r3, r2
 8001398:	781a      	ldrb	r2, [r3, #0]
 800139a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139c:	3302      	adds	r3, #2
 800139e:	4619      	mov	r1, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	440b      	add	r3, r1
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	4610      	mov	r0, r2
 80013aa:	f7ff ffcc 	bl	8001346 <getShort>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f863 	bl	800047c <__aeabi_i2d>
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b53      	ldr	r3, [pc, #332]	; (8001508 <getAccelerations+0x198>)
 80013bc:	f7ff f9f2 	bl	80007a4 <__aeabi_ddiv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b4f      	ldr	r3, [pc, #316]	; (800150c <getAccelerations+0x19c>)
 80013ce:	f7ff f8bf 	bl	8000550 <__aeabi_dmul>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	a349      	add	r3, pc, #292	; (adr r3, 8001500 <getAccelerations+0x190>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7ff f8b6 	bl	8000550 <__aeabi_dmul>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	f7ff fac2 	bl	8000974 <__aeabi_d2f>
 80013f0:	4603      	mov	r3, r0
 80013f2:	61fb      	str	r3, [r7, #28]
		acceleration.accYData = (getShort(data[SEN0386_YH + packetStart], data[SEN0386_YL + packetStart]) / 32768.0) * 16.0 * 9.8;
 80013f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f6:	3305      	adds	r3, #5
 80013f8:	461a      	mov	r2, r3
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	4413      	add	r3, r2
 80013fe:	781a      	ldrb	r2, [r3, #0]
 8001400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001402:	3304      	adds	r3, #4
 8001404:	4619      	mov	r1, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	440b      	add	r3, r1
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	4610      	mov	r0, r2
 8001410:	f7ff ff99 	bl	8001346 <getShort>
 8001414:	4603      	mov	r3, r0
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f830 	bl	800047c <__aeabi_i2d>
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b39      	ldr	r3, [pc, #228]	; (8001508 <getAccelerations+0x198>)
 8001422:	f7ff f9bf 	bl	80007a4 <__aeabi_ddiv>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b36      	ldr	r3, [pc, #216]	; (800150c <getAccelerations+0x19c>)
 8001434:	f7ff f88c 	bl	8000550 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	a32f      	add	r3, pc, #188	; (adr r3, 8001500 <getAccelerations+0x190>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f883 	bl	8000550 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fa8f 	bl	8000974 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	623b      	str	r3, [r7, #32]
		acceleration.accZData = (getShort(data[SEN0386_ZH + packetStart], data[SEN0386_ZL + packetStart]) / 32768.0) * 16.0 * 9.8;
 800145a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145c:	3307      	adds	r3, #7
 800145e:	461a      	mov	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	4413      	add	r3, r2
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001468:	3306      	adds	r3, #6
 800146a:	4619      	mov	r1, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	440b      	add	r3, r1
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4619      	mov	r1, r3
 8001474:	4610      	mov	r0, r2
 8001476:	f7ff ff66 	bl	8001346 <getShort>
 800147a:	4603      	mov	r3, r0
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe fffd 	bl	800047c <__aeabi_i2d>
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	4b20      	ldr	r3, [pc, #128]	; (8001508 <getAccelerations+0x198>)
 8001488:	f7ff f98c 	bl	80007a4 <__aeabi_ddiv>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	4b1c      	ldr	r3, [pc, #112]	; (800150c <getAccelerations+0x19c>)
 800149a:	f7ff f859 	bl	8000550 <__aeabi_dmul>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	a316      	add	r3, pc, #88	; (adr r3, 8001500 <getAccelerations+0x190>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f7ff f850 	bl	8000550 <__aeabi_dmul>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	f7ff fa5c 	bl	8000974 <__aeabi_d2f>
 80014bc:	4603      	mov	r3, r0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
 80014c0:	e005      	b.n	80014ce <getAccelerations+0x15e>
	} else {
		acceleration.accXData = SEN0386_UNDEDFINED;
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <getAccelerations+0x1a0>)
 80014c4:	61fb      	str	r3, [r7, #28]
		acceleration.accYData = SEN0386_UNDEDFINED;
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <getAccelerations+0x1a0>)
 80014c8:	623b      	str	r3, [r7, #32]
		acceleration.accZData = SEN0386_UNDEDFINED;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <getAccelerations+0x1a0>)
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
	}
	return acceleration;
 80014ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d2:	f107 021c 	add.w	r2, r7, #28
 80014d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80014d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e2:	ee06 1a90 	vmov	s13, r1
 80014e6:	ee07 2a10 	vmov	s14, r2
 80014ea:	ee07 3a90 	vmov	s15, r3
}
 80014ee:	eeb0 0a66 	vmov.f32	s0, s13
 80014f2:	eef0 0a47 	vmov.f32	s1, s14
 80014f6:	eeb0 1a67 	vmov.f32	s2, s15
 80014fa:	3738      	adds	r7, #56	; 0x38
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	9999999a 	.word	0x9999999a
 8001504:	40239999 	.word	0x40239999
 8001508:	40e00000 	.word	0x40e00000
 800150c:	40300000 	.word	0x40300000
 8001510:	cb18967f 	.word	0xcb18967f

08001514 <getAngVels>:

AngVel getAngVels(uint8_t* data) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b08e      	sub	sp, #56	; 0x38
 8001518:	af00      	add	r7, sp, #0
 800151a:	6178      	str	r0, [r7, #20]
	AngVel angVel;
	int packetStart = getPacketStart(data, SEN0386_HEADERANGVEL);
 800151c:	2352      	movs	r3, #82	; 0x52
 800151e:	4619      	mov	r1, r3
 8001520:	6978      	ldr	r0, [r7, #20]
 8001522:	f7ff fee8 	bl	80012f6 <getPacketStart>
 8001526:	6378      	str	r0, [r7, #52]	; 0x34
	if (packetStart != NOT_FOUND) {
 8001528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800152a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152e:	d07e      	beq.n	800162e <getAngVels+0x11a>
		angVel.angleVelX = (getShort(data[SEN0386_XH + packetStart], data[SEN0386_XL + packetStart]) / 32768.0) * 2000.0;
 8001530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001532:	3303      	adds	r3, #3
 8001534:	461a      	mov	r2, r3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	4413      	add	r3, r2
 800153a:	781a      	ldrb	r2, [r3, #0]
 800153c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153e:	3302      	adds	r3, #2
 8001540:	4619      	mov	r1, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	440b      	add	r3, r1
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	4610      	mov	r0, r2
 800154c:	f7ff fefb 	bl	8001346 <getShort>
 8001550:	4603      	mov	r3, r0
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe ff92 	bl	800047c <__aeabi_i2d>
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	4b43      	ldr	r3, [pc, #268]	; (800166c <getAngVels+0x158>)
 800155e:	f7ff f921 	bl	80007a4 <__aeabi_ddiv>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	4b40      	ldr	r3, [pc, #256]	; (8001670 <getAngVels+0x15c>)
 8001570:	f7fe ffee 	bl	8000550 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff f9fa 	bl	8000974 <__aeabi_d2f>
 8001580:	4603      	mov	r3, r0
 8001582:	61fb      	str	r3, [r7, #28]
		angVel.angleVelY = (getShort(data[SEN0386_YH + packetStart], data[SEN0386_YL + packetStart]) / 32768.0) * 2000.0;
 8001584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001586:	3305      	adds	r3, #5
 8001588:	461a      	mov	r2, r3
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	4413      	add	r3, r2
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001592:	3304      	adds	r3, #4
 8001594:	4619      	mov	r1, r3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	440b      	add	r3, r1
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	4610      	mov	r0, r2
 80015a0:	f7ff fed1 	bl	8001346 <getShort>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ff68 	bl	800047c <__aeabi_i2d>
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b2e      	ldr	r3, [pc, #184]	; (800166c <getAngVels+0x158>)
 80015b2:	f7ff f8f7 	bl	80007a4 <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <getAngVels+0x15c>)
 80015c4:	f7fe ffc4 	bl	8000550 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff f9d0 	bl	8000974 <__aeabi_d2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	623b      	str	r3, [r7, #32]
		angVel.angleVelZ = (getShort(data[SEN0386_ZH + packetStart], data[SEN0386_ZL + packetStart]) / 32768.0) * 2000.0;
 80015d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015da:	3307      	adds	r3, #7
 80015dc:	461a      	mov	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	4413      	add	r3, r2
 80015e2:	781a      	ldrb	r2, [r3, #0]
 80015e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e6:	3306      	adds	r3, #6
 80015e8:	4619      	mov	r1, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	440b      	add	r3, r1
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	4610      	mov	r0, r2
 80015f4:	f7ff fea7 	bl	8001346 <getShort>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff3e 	bl	800047c <__aeabi_i2d>
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	4b19      	ldr	r3, [pc, #100]	; (800166c <getAngVels+0x158>)
 8001606:	f7ff f8cd 	bl	80007a4 <__aeabi_ddiv>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <getAngVels+0x15c>)
 8001618:	f7fe ff9a 	bl	8000550 <__aeabi_dmul>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff f9a6 	bl	8000974 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
 800162c:	e005      	b.n	800163a <getAngVels+0x126>
	} else {
		angVel.angleVelX = SEN0386_UNDEDFINED;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <getAngVels+0x160>)
 8001630:	61fb      	str	r3, [r7, #28]
		angVel.angleVelY = SEN0386_UNDEDFINED;
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <getAngVels+0x160>)
 8001634:	623b      	str	r3, [r7, #32]
		angVel.angleVelZ = SEN0386_UNDEDFINED;
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <getAngVels+0x160>)
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
	}
	return angVel;
 800163a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800163e:	f107 021c 	add.w	r2, r7, #28
 8001642:	ca07      	ldmia	r2, {r0, r1, r2}
 8001644:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800164a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800164c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164e:	ee06 1a90 	vmov	s13, r1
 8001652:	ee07 2a10 	vmov	s14, r2
 8001656:	ee07 3a90 	vmov	s15, r3
}
 800165a:	eeb0 0a66 	vmov.f32	s0, s13
 800165e:	eef0 0a47 	vmov.f32	s1, s14
 8001662:	eeb0 1a67 	vmov.f32	s2, s15
 8001666:	3738      	adds	r7, #56	; 0x38
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40e00000 	.word	0x40e00000
 8001670:	409f4000 	.word	0x409f4000
 8001674:	cb18967f 	.word	0xcb18967f

08001678 <getAngles>:

Angle getAngles(uint8_t* data) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b08e      	sub	sp, #56	; 0x38
 800167c:	af00      	add	r7, sp, #0
 800167e:	6178      	str	r0, [r7, #20]
	Angle angle;
	int packetStart = getPacketStart(data, SEN0386_HEADERANGLE);
 8001680:	2353      	movs	r3, #83	; 0x53
 8001682:	4619      	mov	r1, r3
 8001684:	6978      	ldr	r0, [r7, #20]
 8001686:	f7ff fe36 	bl	80012f6 <getPacketStart>
 800168a:	6378      	str	r0, [r7, #52]	; 0x34
	if (packetStart != NOT_FOUND) {
 800168c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800168e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001692:	d07e      	beq.n	8001792 <getAngles+0x11a>
		angle.roll = getShort(data[SEN0386_XH + packetStart], data[SEN0386_XL + packetStart]) / 32768.0 * 180.0;
 8001694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001696:	3303      	adds	r3, #3
 8001698:	461a      	mov	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	4413      	add	r3, r2
 800169e:	781a      	ldrb	r2, [r3, #0]
 80016a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a2:	3302      	adds	r3, #2
 80016a4:	4619      	mov	r1, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	440b      	add	r3, r1
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	4610      	mov	r0, r2
 80016b0:	f7ff fe49 	bl	8001346 <getShort>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe fee0 	bl	800047c <__aeabi_i2d>
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <getAngles+0x158>)
 80016c2:	f7ff f86f 	bl	80007a4 <__aeabi_ddiv>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	4b40      	ldr	r3, [pc, #256]	; (80017d4 <getAngles+0x15c>)
 80016d4:	f7fe ff3c 	bl	8000550 <__aeabi_dmul>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f7ff f948 	bl	8000974 <__aeabi_d2f>
 80016e4:	4603      	mov	r3, r0
 80016e6:	61fb      	str	r3, [r7, #28]
		angle.pitch = getShort(data[SEN0386_YH + packetStart], data[SEN0386_YL + packetStart]) / 32768.0 * 180.0;
 80016e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ea:	3305      	adds	r3, #5
 80016ec:	461a      	mov	r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	4413      	add	r3, r2
 80016f2:	781a      	ldrb	r2, [r3, #0]
 80016f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f6:	3304      	adds	r3, #4
 80016f8:	4619      	mov	r1, r3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	440b      	add	r3, r1
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	4610      	mov	r0, r2
 8001704:	f7ff fe1f 	bl	8001346 <getShort>
 8001708:	4603      	mov	r3, r0
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe feb6 	bl	800047c <__aeabi_i2d>
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <getAngles+0x158>)
 8001716:	f7ff f845 	bl	80007a4 <__aeabi_ddiv>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <getAngles+0x15c>)
 8001728:	f7fe ff12 	bl	8000550 <__aeabi_dmul>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff f91e 	bl	8000974 <__aeabi_d2f>
 8001738:	4603      	mov	r3, r0
 800173a:	623b      	str	r3, [r7, #32]
		angle.yaw = getShort(data[SEN0386_ZH + packetStart], data[SEN0386_ZL + packetStart]) / 32768.0 * 180.0;
 800173c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173e:	3307      	adds	r3, #7
 8001740:	461a      	mov	r2, r3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	4413      	add	r3, r2
 8001746:	781a      	ldrb	r2, [r3, #0]
 8001748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174a:	3306      	adds	r3, #6
 800174c:	4619      	mov	r1, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	440b      	add	r3, r1
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4619      	mov	r1, r3
 8001756:	4610      	mov	r0, r2
 8001758:	f7ff fdf5 	bl	8001346 <getShort>
 800175c:	4603      	mov	r3, r0
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fe8c 	bl	800047c <__aeabi_i2d>
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <getAngles+0x158>)
 800176a:	f7ff f81b 	bl	80007a4 <__aeabi_ddiv>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <getAngles+0x15c>)
 800177c:	f7fe fee8 	bl	8000550 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	f7ff f8f4 	bl	8000974 <__aeabi_d2f>
 800178c:	4603      	mov	r3, r0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
 8001790:	e005      	b.n	800179e <getAngles+0x126>
	} else {
		angle.roll = SEN0386_UNDEDFINED;
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <getAngles+0x160>)
 8001794:	61fb      	str	r3, [r7, #28]
		angle.pitch = SEN0386_UNDEDFINED;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <getAngles+0x160>)
 8001798:	623b      	str	r3, [r7, #32]
		angle.yaw = SEN0386_UNDEDFINED;
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <getAngles+0x160>)
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	return angle;
 800179e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a2:	f107 021c 	add.w	r2, r7, #28
 80017a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80017a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b2:	ee06 1a90 	vmov	s13, r1
 80017b6:	ee07 2a10 	vmov	s14, r2
 80017ba:	ee07 3a90 	vmov	s15, r3
}
 80017be:	eeb0 0a66 	vmov.f32	s0, s13
 80017c2:	eef0 0a47 	vmov.f32	s1, s14
 80017c6:	eeb0 1a67 	vmov.f32	s2, s15
 80017ca:	3738      	adds	r7, #56	; 0x38
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40e00000 	.word	0x40e00000
 80017d4:	40668000 	.word	0x40668000
 80017d8:	cb18967f 	.word	0xcb18967f

080017dc <getSensorInput>:

Sen0386Data getSensorInput(uint8_t* data) {
 80017dc:	b5b0      	push	{r4, r5, r7, lr}
 80017de:	b08c      	sub	sp, #48	; 0x30
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
	Sen0386Data sen0386Data;
	sen0386Data.acceleration = getAccelerations(data);
 80017e6:	6838      	ldr	r0, [r7, #0]
 80017e8:	f7ff fdc2 	bl	8001370 <getAccelerations>
 80017ec:	eef0 6a40 	vmov.f32	s13, s0
 80017f0:	eeb0 7a60 	vmov.f32	s14, s1
 80017f4:	eef0 7a41 	vmov.f32	s15, s2
 80017f8:	edc7 6a03 	vstr	s13, [r7, #12]
 80017fc:	ed87 7a04 	vstr	s14, [r7, #16]
 8001800:	edc7 7a05 	vstr	s15, [r7, #20]
	sen0386Data.angularVelocity = getAngVels(data);
 8001804:	6838      	ldr	r0, [r7, #0]
 8001806:	f7ff fe85 	bl	8001514 <getAngVels>
 800180a:	eef0 6a40 	vmov.f32	s13, s0
 800180e:	eeb0 7a60 	vmov.f32	s14, s1
 8001812:	eef0 7a41 	vmov.f32	s15, s2
 8001816:	edc7 6a06 	vstr	s13, [r7, #24]
 800181a:	ed87 7a07 	vstr	s14, [r7, #28]
 800181e:	edc7 7a08 	vstr	s15, [r7, #32]
	sen0386Data.angle = getAngles(data);
 8001822:	6838      	ldr	r0, [r7, #0]
 8001824:	f7ff ff28 	bl	8001678 <getAngles>
 8001828:	eef0 6a40 	vmov.f32	s13, s0
 800182c:	eeb0 7a60 	vmov.f32	s14, s1
 8001830:	eef0 7a41 	vmov.f32	s15, s2
 8001834:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8001838:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800183c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	return sen0386Data;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	461d      	mov	r5, r3
 8001844:	f107 040c 	add.w	r4, r7, #12
 8001848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800184a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800184c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800184e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	602b      	str	r3, [r5, #0]
}
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	3730      	adds	r7, #48	; 0x30
 8001858:	46bd      	mov	sp, r7
 800185a:	bdb0      	pop	{r4, r5, r7, pc}

0800185c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_MspInit+0x4c>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <HAL_MspInit+0x4c>)
 800186c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_MspInit+0x4c>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_MspInit+0x4c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <HAL_MspInit+0x4c>)
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188c:	6413      	str	r3, [r2, #64]	; 0x40
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_MspInit+0x4c>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800189a:	2007      	movs	r0, #7
 800189c:	f000 fba2 	bl	8001fe4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800

080018ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a28      	ldr	r2, [pc, #160]	; (800196c <HAL_SPI_MspInit+0xc0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d14a      	bne.n	8001964 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_SPI_MspInit+0xc4>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a26      	ldr	r2, [pc, #152]	; (8001970 <HAL_SPI_MspInit+0xc4>)
 80018d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_SPI_MspInit+0xc4>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_SPI_MspInit+0xc4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <HAL_SPI_MspInit+0xc4>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_SPI_MspInit+0xc4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_SPI_MspInit+0xc4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a18      	ldr	r2, [pc, #96]	; (8001970 <HAL_SPI_MspInit+0xc4>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_SPI_MspInit+0xc4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001922:	230c      	movs	r3, #12
 8001924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001932:	2305      	movs	r3, #5
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	480d      	ldr	r0, [pc, #52]	; (8001974 <HAL_SPI_MspInit+0xc8>)
 800193e:	f000 ff95 	bl	800286c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001954:	2305      	movs	r3, #5
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	4806      	ldr	r0, [pc, #24]	; (8001978 <HAL_SPI_MspInit+0xcc>)
 8001960:	f000 ff84 	bl	800286c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001964:	bf00      	nop
 8001966:	3728      	adds	r7, #40	; 0x28
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40003800 	.word	0x40003800
 8001970:	40023800 	.word	0x40023800
 8001974:	40020800 	.word	0x40020800
 8001978:	40020400 	.word	0x40020400

0800197c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08e      	sub	sp, #56	; 0x38
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a99      	ldr	r2, [pc, #612]	; (8001c00 <HAL_UART_MspInit+0x284>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d163      	bne.n	8001a66 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
 80019a2:	4b98      	ldr	r3, [pc, #608]	; (8001c04 <HAL_UART_MspInit+0x288>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a97      	ldr	r2, [pc, #604]	; (8001c04 <HAL_UART_MspInit+0x288>)
 80019a8:	f043 0310 	orr.w	r3, r3, #16
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b95      	ldr	r3, [pc, #596]	; (8001c04 <HAL_UART_MspInit+0x288>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	623b      	str	r3, [r7, #32]
 80019b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	4b91      	ldr	r3, [pc, #580]	; (8001c04 <HAL_UART_MspInit+0x288>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a90      	ldr	r2, [pc, #576]	; (8001c04 <HAL_UART_MspInit+0x288>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b8e      	ldr	r3, [pc, #568]	; (8001c04 <HAL_UART_MspInit+0x288>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
 80019d4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019e0:	2302      	movs	r3, #2
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019e8:	2307      	movs	r3, #7
 80019ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f0:	4619      	mov	r1, r3
 80019f2:	4885      	ldr	r0, [pc, #532]	; (8001c08 <HAL_UART_MspInit+0x28c>)
 80019f4:	f000 ff3a 	bl	800286c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80019f8:	4b84      	ldr	r3, [pc, #528]	; (8001c0c <HAL_UART_MspInit+0x290>)
 80019fa:	4a85      	ldr	r2, [pc, #532]	; (8001c10 <HAL_UART_MspInit+0x294>)
 80019fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80019fe:	4b83      	ldr	r3, [pc, #524]	; (8001c0c <HAL_UART_MspInit+0x290>)
 8001a00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a04:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a06:	4b81      	ldr	r3, [pc, #516]	; (8001c0c <HAL_UART_MspInit+0x290>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a0c:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <HAL_UART_MspInit+0x290>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a12:	4b7e      	ldr	r3, [pc, #504]	; (8001c0c <HAL_UART_MspInit+0x290>)
 8001a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a18:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a1a:	4b7c      	ldr	r3, [pc, #496]	; (8001c0c <HAL_UART_MspInit+0x290>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a20:	4b7a      	ldr	r3, [pc, #488]	; (8001c0c <HAL_UART_MspInit+0x290>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001a26:	4b79      	ldr	r3, [pc, #484]	; (8001c0c <HAL_UART_MspInit+0x290>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a2c:	4b77      	ldr	r3, [pc, #476]	; (8001c0c <HAL_UART_MspInit+0x290>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a32:	4b76      	ldr	r3, [pc, #472]	; (8001c0c <HAL_UART_MspInit+0x290>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a38:	4874      	ldr	r0, [pc, #464]	; (8001c0c <HAL_UART_MspInit+0x290>)
 8001a3a:	f000 fb15 	bl	8002068 <HAL_DMA_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001a44:	f7ff fc52 	bl	80012ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a70      	ldr	r2, [pc, #448]	; (8001c0c <HAL_UART_MspInit+0x290>)
 8001a4c:	639a      	str	r2, [r3, #56]	; 0x38
 8001a4e:	4a6f      	ldr	r2, [pc, #444]	; (8001c0c <HAL_UART_MspInit+0x290>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2100      	movs	r1, #0
 8001a58:	2025      	movs	r0, #37	; 0x25
 8001a5a:	f000 face 	bl	8001ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a5e:	2025      	movs	r0, #37	; 0x25
 8001a60:	f000 fae7 	bl	8002032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a64:	e0c8      	b.n	8001bf8 <HAL_UART_MspInit+0x27c>
  else if(huart->Instance==USART2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a6a      	ldr	r2, [pc, #424]	; (8001c14 <HAL_UART_MspInit+0x298>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d15b      	bne.n	8001b28 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	4b63      	ldr	r3, [pc, #396]	; (8001c04 <HAL_UART_MspInit+0x288>)
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	4a62      	ldr	r2, [pc, #392]	; (8001c04 <HAL_UART_MspInit+0x288>)
 8001a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a80:	4b60      	ldr	r3, [pc, #384]	; (8001c04 <HAL_UART_MspInit+0x288>)
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	4b5c      	ldr	r3, [pc, #368]	; (8001c04 <HAL_UART_MspInit+0x288>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	4a5b      	ldr	r2, [pc, #364]	; (8001c04 <HAL_UART_MspInit+0x288>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9c:	4b59      	ldr	r3, [pc, #356]	; (8001c04 <HAL_UART_MspInit+0x288>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aa8:	230c      	movs	r3, #12
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ab8:	2307      	movs	r3, #7
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4851      	ldr	r0, [pc, #324]	; (8001c08 <HAL_UART_MspInit+0x28c>)
 8001ac4:	f000 fed2 	bl	800286c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001ac8:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <HAL_UART_MspInit+0x29c>)
 8001aca:	4a54      	ldr	r2, [pc, #336]	; (8001c1c <HAL_UART_MspInit+0x2a0>)
 8001acc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001ace:	4b52      	ldr	r3, [pc, #328]	; (8001c18 <HAL_UART_MspInit+0x29c>)
 8001ad0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ad4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad6:	4b50      	ldr	r3, [pc, #320]	; (8001c18 <HAL_UART_MspInit+0x29c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001adc:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <HAL_UART_MspInit+0x29c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae2:	4b4d      	ldr	r3, [pc, #308]	; (8001c18 <HAL_UART_MspInit+0x29c>)
 8001ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ae8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aea:	4b4b      	ldr	r3, [pc, #300]	; (8001c18 <HAL_UART_MspInit+0x29c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af0:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <HAL_UART_MspInit+0x29c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001af6:	4b48      	ldr	r3, [pc, #288]	; (8001c18 <HAL_UART_MspInit+0x29c>)
 8001af8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001afc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001afe:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <HAL_UART_MspInit+0x29c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b04:	4b44      	ldr	r3, [pc, #272]	; (8001c18 <HAL_UART_MspInit+0x29c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b0a:	4843      	ldr	r0, [pc, #268]	; (8001c18 <HAL_UART_MspInit+0x29c>)
 8001b0c:	f000 faac 	bl	8002068 <HAL_DMA_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001b16:	f7ff fbe9 	bl	80012ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a3e      	ldr	r2, [pc, #248]	; (8001c18 <HAL_UART_MspInit+0x29c>)
 8001b1e:	639a      	str	r2, [r3, #56]	; 0x38
 8001b20:	4a3d      	ldr	r2, [pc, #244]	; (8001c18 <HAL_UART_MspInit+0x29c>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b26:	e067      	b.n	8001bf8 <HAL_UART_MspInit+0x27c>
  else if(huart->Instance==USART6)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a3c      	ldr	r2, [pc, #240]	; (8001c20 <HAL_UART_MspInit+0x2a4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d162      	bne.n	8001bf8 <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	4b33      	ldr	r3, [pc, #204]	; (8001c04 <HAL_UART_MspInit+0x288>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a32      	ldr	r2, [pc, #200]	; (8001c04 <HAL_UART_MspInit+0x288>)
 8001b3c:	f043 0320 	orr.w	r3, r3, #32
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <HAL_UART_MspInit+0x288>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f003 0320 	and.w	r3, r3, #32
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <HAL_UART_MspInit+0x288>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a2b      	ldr	r2, [pc, #172]	; (8001c04 <HAL_UART_MspInit+0x288>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <HAL_UART_MspInit+0x288>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b6a:	23c0      	movs	r3, #192	; 0xc0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b72:	2302      	movs	r3, #2
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b7a:	2308      	movs	r3, #8
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b82:	4619      	mov	r1, r3
 8001b84:	4827      	ldr	r0, [pc, #156]	; (8001c24 <HAL_UART_MspInit+0x2a8>)
 8001b86:	f000 fe71 	bl	800286c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <HAL_UART_MspInit+0x2ac>)
 8001b8c:	4a27      	ldr	r2, [pc, #156]	; (8001c2c <HAL_UART_MspInit+0x2b0>)
 8001b8e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001b90:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <HAL_UART_MspInit+0x2ac>)
 8001b92:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001b96:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b98:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <HAL_UART_MspInit+0x2ac>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <HAL_UART_MspInit+0x2ac>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ba4:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_UART_MspInit+0x2ac>)
 8001ba6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001baa:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <HAL_UART_MspInit+0x2ac>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <HAL_UART_MspInit+0x2ac>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_UART_MspInit+0x2ac>)
 8001bba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bbe:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_UART_MspInit+0x2ac>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <HAL_UART_MspInit+0x2ac>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001bcc:	4816      	ldr	r0, [pc, #88]	; (8001c28 <HAL_UART_MspInit+0x2ac>)
 8001bce:	f000 fa4b 	bl	8002068 <HAL_DMA_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_UART_MspInit+0x260>
      Error_Handler();
 8001bd8:	f7ff fb88 	bl	80012ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <HAL_UART_MspInit+0x2ac>)
 8001be0:	639a      	str	r2, [r3, #56]	; 0x38
 8001be2:	4a11      	ldr	r2, [pc, #68]	; (8001c28 <HAL_UART_MspInit+0x2ac>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2100      	movs	r1, #0
 8001bec:	2047      	movs	r0, #71	; 0x47
 8001bee:	f000 fa04 	bl	8001ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001bf2:	2047      	movs	r0, #71	; 0x47
 8001bf4:	f000 fa1d 	bl	8002032 <HAL_NVIC_EnableIRQ>
}
 8001bf8:	bf00      	nop
 8001bfa:	3738      	adds	r7, #56	; 0x38
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40011000 	.word	0x40011000
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	2000014c 	.word	0x2000014c
 8001c10:	40026440 	.word	0x40026440
 8001c14:	40004400 	.word	0x40004400
 8001c18:	200001ac 	.word	0x200001ac
 8001c1c:	40026088 	.word	0x40026088
 8001c20:	40011400 	.word	0x40011400
 8001c24:	40020800 	.word	0x40020800
 8001c28:	2000020c 	.word	0x2000020c
 8001c2c:	40026428 	.word	0x40026428

08001c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <NMI_Handler+0x4>

08001c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <HardFault_Handler+0x4>

08001c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <MemManage_Handler+0x4>

08001c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <BusFault_Handler+0x4>

08001c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <UsageFault_Handler+0x4>

08001c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7c:	f000 f8c2 	bl	8001e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <DMA1_Stream5_IRQHandler+0x10>)
 8001c8a:	f000 fb85 	bl	8002398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200001ac 	.word	0x200001ac

08001c98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <USART1_IRQHandler+0x10>)
 8001c9e:	f001 fd21 	bl	80036e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000080 	.word	0x20000080

08001cac <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <DMA2_Stream1_IRQHandler+0x10>)
 8001cb2:	f000 fb71 	bl	8002398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000020c 	.word	0x2000020c

08001cc0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <DMA2_Stream2_IRQHandler+0x10>)
 8001cc6:	f000 fb67 	bl	8002398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2000014c 	.word	0x2000014c

08001cd4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <USART6_IRQHandler+0x10>)
 8001cda:	f001 fd03 	bl	80036e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000108 	.word	0x20000108

08001ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <SystemInit+0x20>)
 8001cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <SystemInit+0x20>)
 8001cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d10:	480d      	ldr	r0, [pc, #52]	; (8001d48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d12:	490e      	ldr	r1, [pc, #56]	; (8001d4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d14:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d18:	e002      	b.n	8001d20 <LoopCopyDataInit>

08001d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1e:	3304      	adds	r3, #4

08001d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d24:	d3f9      	bcc.n	8001d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d26:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d28:	4c0b      	ldr	r4, [pc, #44]	; (8001d58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d2c:	e001      	b.n	8001d32 <LoopFillZerobss>

08001d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d30:	3204      	adds	r2, #4

08001d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d34:	d3fb      	bcc.n	8001d2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d36:	f7ff ffd7 	bl	8001ce8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d3a:	f002 fd57 	bl	80047ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3e:	f7fe ffeb 	bl	8000d18 <main>
  bx  lr    
 8001d42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d50:	080048a8 	.word	0x080048a8
  ldr r2, =_sbss
 8001d54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d58:	200002d4 	.word	0x200002d4

08001d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <ADC_IRQHandler>
	...

08001d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <HAL_Init+0x40>)
 8001d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_Init+0x40>)
 8001d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <HAL_Init+0x40>)
 8001d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d88:	2003      	movs	r0, #3
 8001d8a:	f000 f92b 	bl	8001fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f000 f808 	bl	8001da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d94:	f7ff fd62 	bl	800185c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023c00 	.word	0x40023c00

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_InitTick+0x54>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_InitTick+0x58>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f943 	bl	800204e <HAL_SYSTICK_Config>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00e      	b.n	8001df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b0f      	cmp	r3, #15
 8001dd6:	d80a      	bhi.n	8001dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f000 f90b 	bl	8001ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de4:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <HAL_InitTick+0x5c>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e000      	b.n	8001df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000008 	.word	0x20000008
 8001e00:	20000004 	.word	0x20000004

08001e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x20>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x24>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_IncTick+0x24>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000008 	.word	0x20000008
 8001e28:	200002d0 	.word	0x200002d0

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200002d0 	.word	0x200002d0

08001e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <__NVIC_SetPriorityGrouping+0x44>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e60:	4013      	ands	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e76:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <__NVIC_SetPriorityGrouping+0x44>)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	60d3      	str	r3, [r2, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e90:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	f003 0307 	and.w	r3, r3, #7
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	db0b      	blt.n	8001ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	f003 021f 	and.w	r2, r3, #31
 8001ec0:	4907      	ldr	r1, [pc, #28]	; (8001ee0 <__NVIC_EnableIRQ+0x38>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	2001      	movs	r0, #1
 8001eca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000e100 	.word	0xe000e100

08001ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	6039      	str	r1, [r7, #0]
 8001eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	db0a      	blt.n	8001f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	490c      	ldr	r1, [pc, #48]	; (8001f30 <__NVIC_SetPriority+0x4c>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	0112      	lsls	r2, r2, #4
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	440b      	add	r3, r1
 8001f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f0c:	e00a      	b.n	8001f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4908      	ldr	r1, [pc, #32]	; (8001f34 <__NVIC_SetPriority+0x50>)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	3b04      	subs	r3, #4
 8001f1c:	0112      	lsls	r2, r2, #4
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	440b      	add	r3, r1
 8001f22:	761a      	strb	r2, [r3, #24]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000e100 	.word	0xe000e100
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	; 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f1c3 0307 	rsb	r3, r3, #7
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	bf28      	it	cs
 8001f56:	2304      	movcs	r3, #4
 8001f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d902      	bls.n	8001f68 <NVIC_EncodePriority+0x30>
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3b03      	subs	r3, #3
 8001f66:	e000      	b.n	8001f6a <NVIC_EncodePriority+0x32>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43d9      	mvns	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	4313      	orrs	r3, r2
         );
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	; 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb0:	d301      	bcc.n	8001fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00f      	b.n	8001fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <SysTick_Config+0x40>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fbe:	210f      	movs	r1, #15
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f7ff ff8e 	bl	8001ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <SysTick_Config+0x40>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fce:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <SysTick_Config+0x40>)
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	e000e010 	.word	0xe000e010

08001fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff29 	bl	8001e44 <__NVIC_SetPriorityGrouping>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800200c:	f7ff ff3e 	bl	8001e8c <__NVIC_GetPriorityGrouping>
 8002010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	6978      	ldr	r0, [r7, #20]
 8002018:	f7ff ff8e 	bl	8001f38 <NVIC_EncodePriority>
 800201c:	4602      	mov	r2, r0
 800201e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff5d 	bl	8001ee4 <__NVIC_SetPriority>
}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff31 	bl	8001ea8 <__NVIC_EnableIRQ>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ffa2 	bl	8001fa0 <SysTick_Config>
 800205c:	4603      	mov	r3, r0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002074:	f7ff feda 	bl	8001e2c <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e099      	b.n	80021b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2202      	movs	r2, #2
 8002088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0201 	bic.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a4:	e00f      	b.n	80020c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020a6:	f7ff fec1 	bl	8001e2c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b05      	cmp	r3, #5
 80020b2:	d908      	bls.n	80020c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2220      	movs	r2, #32
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2203      	movs	r2, #3
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e078      	b.n	80021b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1e8      	bne.n	80020a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <HAL_DMA_Init+0x158>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800210a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	4313      	orrs	r3, r2
 8002116:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	2b04      	cmp	r3, #4
 800211e:	d107      	bne.n	8002130 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	4313      	orrs	r3, r2
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4313      	orrs	r3, r2
 800212e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f023 0307 	bic.w	r3, r3, #7
 8002146:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	2b04      	cmp	r3, #4
 8002158:	d117      	bne.n	800218a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4313      	orrs	r3, r2
 8002162:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00e      	beq.n	800218a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 fb01 	bl	8002774 <DMA_CheckFifoParam>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2240      	movs	r2, #64	; 0x40
 800217c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002186:	2301      	movs	r3, #1
 8002188:	e016      	b.n	80021b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fab8 	bl	8002708 <DMA_CalcBaseAndBitshift>
 8002198:	4603      	mov	r3, r0
 800219a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	223f      	movs	r2, #63	; 0x3f
 80021a2:	409a      	lsls	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	f010803f 	.word	0xf010803f

080021c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_DMA_Start_IT+0x26>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e040      	b.n	800226c <HAL_DMA_Start_IT+0xa8>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d12f      	bne.n	800225e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2202      	movs	r2, #2
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 fa4a 	bl	80026ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221c:	223f      	movs	r2, #63	; 0x3f
 800221e:	409a      	lsls	r2, r3
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0216 	orr.w	r2, r2, #22
 8002232:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	d007      	beq.n	800224c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0208 	orr.w	r2, r2, #8
 800224a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	e005      	b.n	800226a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002266:	2302      	movs	r3, #2
 8002268:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800226a:	7dfb      	ldrb	r3, [r7, #23]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002282:	f7ff fdd3 	bl	8001e2c <HAL_GetTick>
 8002286:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d008      	beq.n	80022a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e052      	b.n	800234c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0216 	bic.w	r2, r2, #22
 80022b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d103      	bne.n	80022d6 <HAL_DMA_Abort+0x62>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0208 	bic.w	r2, r2, #8
 80022e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0201 	bic.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022f6:	e013      	b.n	8002320 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022f8:	f7ff fd98 	bl	8001e2c <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b05      	cmp	r3, #5
 8002304:	d90c      	bls.n	8002320 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2220      	movs	r2, #32
 800230a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2203      	movs	r2, #3
 8002310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e015      	b.n	800234c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1e4      	bne.n	80022f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	223f      	movs	r2, #63	; 0x3f
 8002334:	409a      	lsls	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d004      	beq.n	8002372 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2280      	movs	r2, #128	; 0x80
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e00c      	b.n	800238c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2205      	movs	r2, #5
 8002376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0201 	bic.w	r2, r2, #1
 8002388:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023a4:	4b8e      	ldr	r3, [pc, #568]	; (80025e0 <HAL_DMA_IRQHandler+0x248>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a8e      	ldr	r2, [pc, #568]	; (80025e4 <HAL_DMA_IRQHandler+0x24c>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	0a9b      	lsrs	r3, r3, #10
 80023b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c2:	2208      	movs	r2, #8
 80023c4:	409a      	lsls	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01a      	beq.n	8002404 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d013      	beq.n	8002404 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0204 	bic.w	r2, r2, #4
 80023ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f0:	2208      	movs	r2, #8
 80023f2:	409a      	lsls	r2, r3
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	f043 0201 	orr.w	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002408:	2201      	movs	r2, #1
 800240a:	409a      	lsls	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d012      	beq.n	800243a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00b      	beq.n	800243a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002426:	2201      	movs	r2, #1
 8002428:	409a      	lsls	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	f043 0202 	orr.w	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243e:	2204      	movs	r2, #4
 8002440:	409a      	lsls	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4013      	ands	r3, r2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d012      	beq.n	8002470 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00b      	beq.n	8002470 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245c:	2204      	movs	r2, #4
 800245e:	409a      	lsls	r2, r3
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	f043 0204 	orr.w	r2, r3, #4
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	2210      	movs	r2, #16
 8002476:	409a      	lsls	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d043      	beq.n	8002508 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d03c      	beq.n	8002508 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002492:	2210      	movs	r2, #16
 8002494:	409a      	lsls	r2, r3
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d018      	beq.n	80024da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d108      	bne.n	80024c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d024      	beq.n	8002508 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	4798      	blx	r3
 80024c6:	e01f      	b.n	8002508 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01b      	beq.n	8002508 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
 80024d8:	e016      	b.n	8002508 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d107      	bne.n	80024f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0208 	bic.w	r2, r2, #8
 80024f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	2220      	movs	r2, #32
 800250e:	409a      	lsls	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 808f 	beq.w	8002638 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 8087 	beq.w	8002638 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252e:	2220      	movs	r2, #32
 8002530:	409a      	lsls	r2, r3
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b05      	cmp	r3, #5
 8002540:	d136      	bne.n	80025b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0216 	bic.w	r2, r2, #22
 8002550:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002560:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d103      	bne.n	8002572 <HAL_DMA_IRQHandler+0x1da>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0208 	bic.w	r2, r2, #8
 8002580:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	223f      	movs	r2, #63	; 0x3f
 8002588:	409a      	lsls	r2, r3
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d07e      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	4798      	blx	r3
        }
        return;
 80025ae:	e079      	b.n	80026a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d01d      	beq.n	80025fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10d      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d031      	beq.n	8002638 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
 80025dc:	e02c      	b.n	8002638 <HAL_DMA_IRQHandler+0x2a0>
 80025de:	bf00      	nop
 80025e0:	20000000 	.word	0x20000000
 80025e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d023      	beq.n	8002638 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4798      	blx	r3
 80025f8:	e01e      	b.n	8002638 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10f      	bne.n	8002628 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0210 	bic.w	r2, r2, #16
 8002616:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263c:	2b00      	cmp	r3, #0
 800263e:	d032      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d022      	beq.n	8002692 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2205      	movs	r2, #5
 8002650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	3301      	adds	r3, #1
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	429a      	cmp	r2, r3
 800266e:	d307      	bcc.n	8002680 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f2      	bne.n	8002664 <HAL_DMA_IRQHandler+0x2cc>
 800267e:	e000      	b.n	8002682 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002680:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	4798      	blx	r3
 80026a2:	e000      	b.n	80026a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80026a4:	bf00      	nop
    }
  }
}
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b40      	cmp	r3, #64	; 0x40
 80026d8:	d108      	bne.n	80026ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026ea:	e007      	b.n	80026fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	60da      	str	r2, [r3, #12]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	3b10      	subs	r3, #16
 8002718:	4a14      	ldr	r2, [pc, #80]	; (800276c <DMA_CalcBaseAndBitshift+0x64>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002722:	4a13      	ldr	r2, [pc, #76]	; (8002770 <DMA_CalcBaseAndBitshift+0x68>)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4413      	add	r3, r2
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b03      	cmp	r3, #3
 8002734:	d909      	bls.n	800274a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800273e:	f023 0303 	bic.w	r3, r3, #3
 8002742:	1d1a      	adds	r2, r3, #4
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	659a      	str	r2, [r3, #88]	; 0x58
 8002748:	e007      	b.n	800275a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002752:	f023 0303 	bic.w	r3, r3, #3
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	aaaaaaab 	.word	0xaaaaaaab
 8002770:	08004890 	.word	0x08004890

08002774 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d11f      	bne.n	80027ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d856      	bhi.n	8002842 <DMA_CheckFifoParam+0xce>
 8002794:	a201      	add	r2, pc, #4	; (adr r2, 800279c <DMA_CheckFifoParam+0x28>)
 8002796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279a:	bf00      	nop
 800279c:	080027ad 	.word	0x080027ad
 80027a0:	080027bf 	.word	0x080027bf
 80027a4:	080027ad 	.word	0x080027ad
 80027a8:	08002843 	.word	0x08002843
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d046      	beq.n	8002846 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027bc:	e043      	b.n	8002846 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027c6:	d140      	bne.n	800284a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027cc:	e03d      	b.n	800284a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d6:	d121      	bne.n	800281c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d837      	bhi.n	800284e <DMA_CheckFifoParam+0xda>
 80027de:	a201      	add	r2, pc, #4	; (adr r2, 80027e4 <DMA_CheckFifoParam+0x70>)
 80027e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e4:	080027f5 	.word	0x080027f5
 80027e8:	080027fb 	.word	0x080027fb
 80027ec:	080027f5 	.word	0x080027f5
 80027f0:	0800280d 	.word	0x0800280d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
      break;
 80027f8:	e030      	b.n	800285c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d025      	beq.n	8002852 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280a:	e022      	b.n	8002852 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002814:	d11f      	bne.n	8002856 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800281a:	e01c      	b.n	8002856 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d903      	bls.n	800282a <DMA_CheckFifoParam+0xb6>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d003      	beq.n	8002830 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002828:	e018      	b.n	800285c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
      break;
 800282e:	e015      	b.n	800285c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00e      	beq.n	800285a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
      break;
 8002840:	e00b      	b.n	800285a <DMA_CheckFifoParam+0xe6>
      break;
 8002842:	bf00      	nop
 8002844:	e00a      	b.n	800285c <DMA_CheckFifoParam+0xe8>
      break;
 8002846:	bf00      	nop
 8002848:	e008      	b.n	800285c <DMA_CheckFifoParam+0xe8>
      break;
 800284a:	bf00      	nop
 800284c:	e006      	b.n	800285c <DMA_CheckFifoParam+0xe8>
      break;
 800284e:	bf00      	nop
 8002850:	e004      	b.n	800285c <DMA_CheckFifoParam+0xe8>
      break;
 8002852:	bf00      	nop
 8002854:	e002      	b.n	800285c <DMA_CheckFifoParam+0xe8>
      break;   
 8002856:	bf00      	nop
 8002858:	e000      	b.n	800285c <DMA_CheckFifoParam+0xe8>
      break;
 800285a:	bf00      	nop
    }
  } 
  
  return status; 
 800285c:	7bfb      	ldrb	r3, [r7, #15]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop

0800286c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800286c:	b480      	push	{r7}
 800286e:	b089      	sub	sp, #36	; 0x24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	e159      	b.n	8002b3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002888:	2201      	movs	r2, #1
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	f040 8148 	bne.w	8002b36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d005      	beq.n	80028be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d130      	bne.n	8002920 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	2203      	movs	r2, #3
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f4:	2201      	movs	r2, #1
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 0201 	and.w	r2, r3, #1
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	2b03      	cmp	r3, #3
 800292a:	d017      	beq.n	800295c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	2203      	movs	r2, #3
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d123      	bne.n	80029b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	08da      	lsrs	r2, r3, #3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3208      	adds	r2, #8
 8002970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	220f      	movs	r2, #15
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	08da      	lsrs	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3208      	adds	r2, #8
 80029aa:	69b9      	ldr	r1, [r7, #24]
 80029ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	2203      	movs	r2, #3
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 0203 	and.w	r2, r3, #3
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80a2 	beq.w	8002b36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b57      	ldr	r3, [pc, #348]	; (8002b54 <HAL_GPIO_Init+0x2e8>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a56      	ldr	r2, [pc, #344]	; (8002b54 <HAL_GPIO_Init+0x2e8>)
 80029fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b54      	ldr	r3, [pc, #336]	; (8002b54 <HAL_GPIO_Init+0x2e8>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a0e:	4a52      	ldr	r2, [pc, #328]	; (8002b58 <HAL_GPIO_Init+0x2ec>)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	3302      	adds	r3, #2
 8002a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	220f      	movs	r2, #15
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a49      	ldr	r2, [pc, #292]	; (8002b5c <HAL_GPIO_Init+0x2f0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d019      	beq.n	8002a6e <HAL_GPIO_Init+0x202>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a48      	ldr	r2, [pc, #288]	; (8002b60 <HAL_GPIO_Init+0x2f4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_GPIO_Init+0x1fe>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a47      	ldr	r2, [pc, #284]	; (8002b64 <HAL_GPIO_Init+0x2f8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00d      	beq.n	8002a66 <HAL_GPIO_Init+0x1fa>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a46      	ldr	r2, [pc, #280]	; (8002b68 <HAL_GPIO_Init+0x2fc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d007      	beq.n	8002a62 <HAL_GPIO_Init+0x1f6>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a45      	ldr	r2, [pc, #276]	; (8002b6c <HAL_GPIO_Init+0x300>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d101      	bne.n	8002a5e <HAL_GPIO_Init+0x1f2>
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	e008      	b.n	8002a70 <HAL_GPIO_Init+0x204>
 8002a5e:	2307      	movs	r3, #7
 8002a60:	e006      	b.n	8002a70 <HAL_GPIO_Init+0x204>
 8002a62:	2303      	movs	r3, #3
 8002a64:	e004      	b.n	8002a70 <HAL_GPIO_Init+0x204>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e002      	b.n	8002a70 <HAL_GPIO_Init+0x204>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_GPIO_Init+0x204>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	f002 0203 	and.w	r2, r2, #3
 8002a76:	0092      	lsls	r2, r2, #2
 8002a78:	4093      	lsls	r3, r2
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a80:	4935      	ldr	r1, [pc, #212]	; (8002b58 <HAL_GPIO_Init+0x2ec>)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	089b      	lsrs	r3, r3, #2
 8002a86:	3302      	adds	r3, #2
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8e:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ab2:	4a2f      	ldr	r2, [pc, #188]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab8:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002adc:	4a24      	ldr	r2, [pc, #144]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ae2:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b06:	4a1a      	ldr	r2, [pc, #104]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b0c:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b30:	4a0f      	ldr	r2, [pc, #60]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	61fb      	str	r3, [r7, #28]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	2b0f      	cmp	r3, #15
 8002b40:	f67f aea2 	bls.w	8002888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	3724      	adds	r7, #36	; 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40013800 	.word	0x40013800
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	40020400 	.word	0x40020400
 8002b64:	40020800 	.word	0x40020800
 8002b68:	40020c00 	.word	0x40020c00
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40013c00 	.word	0x40013c00

08002b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	807b      	strh	r3, [r7, #2]
 8002b80:	4613      	mov	r3, r2
 8002b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b84:	787b      	ldrb	r3, [r7, #1]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b90:	e003      	b.n	8002b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b92:	887b      	ldrh	r3, [r7, #2]
 8002b94:	041a      	lsls	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	619a      	str	r2, [r3, #24]
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e267      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d075      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bc6:	4b88      	ldr	r3, [pc, #544]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d00c      	beq.n	8002bec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd2:	4b85      	ldr	r3, [pc, #532]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d112      	bne.n	8002c04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bde:	4b82      	ldr	r3, [pc, #520]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bea:	d10b      	bne.n	8002c04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bec:	4b7e      	ldr	r3, [pc, #504]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d05b      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x108>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d157      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e242      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0c:	d106      	bne.n	8002c1c <HAL_RCC_OscConfig+0x74>
 8002c0e:	4b76      	ldr	r3, [pc, #472]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a75      	ldr	r2, [pc, #468]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e01d      	b.n	8002c58 <HAL_RCC_OscConfig+0xb0>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x98>
 8002c26:	4b70      	ldr	r3, [pc, #448]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a6f      	ldr	r2, [pc, #444]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b6d      	ldr	r3, [pc, #436]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a6c      	ldr	r2, [pc, #432]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0xb0>
 8002c40:	4b69      	ldr	r3, [pc, #420]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a68      	ldr	r2, [pc, #416]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	4b66      	ldr	r3, [pc, #408]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a65      	ldr	r2, [pc, #404]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d013      	beq.n	8002c88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7ff f8e4 	bl	8001e2c <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c68:	f7ff f8e0 	bl	8001e2c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e207      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	4b5b      	ldr	r3, [pc, #364]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0xc0>
 8002c86:	e014      	b.n	8002cb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7ff f8d0 	bl	8001e2c <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c90:	f7ff f8cc 	bl	8001e2c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e1f3      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	4b51      	ldr	r3, [pc, #324]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0xe8>
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d063      	beq.n	8002d86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cbe:	4b4a      	ldr	r3, [pc, #296]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cca:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d11c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd6:	4b44      	ldr	r3, [pc, #272]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d116      	bne.n	8002d10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce2:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_RCC_OscConfig+0x152>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d001      	beq.n	8002cfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e1c7      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfa:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4937      	ldr	r1, [pc, #220]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0e:	e03a      	b.n	8002d86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d020      	beq.n	8002d5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d18:	4b34      	ldr	r3, [pc, #208]	; (8002dec <HAL_RCC_OscConfig+0x244>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7ff f885 	bl	8001e2c <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d26:	f7ff f881 	bl	8001e2c <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e1a8      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d38:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d44:	4b28      	ldr	r3, [pc, #160]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4925      	ldr	r1, [pc, #148]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
 8002d58:	e015      	b.n	8002d86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5a:	4b24      	ldr	r3, [pc, #144]	; (8002dec <HAL_RCC_OscConfig+0x244>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7ff f864 	bl	8001e2c <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d68:	f7ff f860 	bl	8001e2c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e187      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d036      	beq.n	8002e00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d016      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <HAL_RCC_OscConfig+0x248>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da0:	f7ff f844 	bl	8001e2c <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002da8:	f7ff f840 	bl	8001e2c <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e167      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x200>
 8002dc6:	e01b      	b.n	8002e00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <HAL_RCC_OscConfig+0x248>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dce:	f7ff f82d 	bl	8001e2c <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd4:	e00e      	b.n	8002df4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd6:	f7ff f829 	bl	8001e2c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d907      	bls.n	8002df4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e150      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
 8002de8:	40023800 	.word	0x40023800
 8002dec:	42470000 	.word	0x42470000
 8002df0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df4:	4b88      	ldr	r3, [pc, #544]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1ea      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8097 	beq.w	8002f3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e12:	4b81      	ldr	r3, [pc, #516]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10f      	bne.n	8002e3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	4b7d      	ldr	r3, [pc, #500]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a7c      	ldr	r2, [pc, #496]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2e:	4b7a      	ldr	r3, [pc, #488]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3e:	4b77      	ldr	r3, [pc, #476]	; (800301c <HAL_RCC_OscConfig+0x474>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d118      	bne.n	8002e7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e4a:	4b74      	ldr	r3, [pc, #464]	; (800301c <HAL_RCC_OscConfig+0x474>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a73      	ldr	r2, [pc, #460]	; (800301c <HAL_RCC_OscConfig+0x474>)
 8002e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e56:	f7fe ffe9 	bl	8001e2c <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5e:	f7fe ffe5 	bl	8001e2c <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e10c      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e70:	4b6a      	ldr	r3, [pc, #424]	; (800301c <HAL_RCC_OscConfig+0x474>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d106      	bne.n	8002e92 <HAL_RCC_OscConfig+0x2ea>
 8002e84:	4b64      	ldr	r3, [pc, #400]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	4a63      	ldr	r2, [pc, #396]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e90:	e01c      	b.n	8002ecc <HAL_RCC_OscConfig+0x324>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b05      	cmp	r3, #5
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x30c>
 8002e9a:	4b5f      	ldr	r3, [pc, #380]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	4a5e      	ldr	r2, [pc, #376]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002ea0:	f043 0304 	orr.w	r3, r3, #4
 8002ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea6:	4b5c      	ldr	r3, [pc, #368]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	4a5b      	ldr	r2, [pc, #364]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_OscConfig+0x324>
 8002eb4:	4b58      	ldr	r3, [pc, #352]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	4a57      	ldr	r2, [pc, #348]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002eba:	f023 0301 	bic.w	r3, r3, #1
 8002ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec0:	4b55      	ldr	r3, [pc, #340]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	4a54      	ldr	r2, [pc, #336]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002ec6:	f023 0304 	bic.w	r3, r3, #4
 8002eca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d015      	beq.n	8002f00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7fe ffaa 	bl	8001e2c <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002edc:	f7fe ffa6 	bl	8001e2c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e0cb      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef2:	4b49      	ldr	r3, [pc, #292]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0ee      	beq.n	8002edc <HAL_RCC_OscConfig+0x334>
 8002efe:	e014      	b.n	8002f2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f00:	f7fe ff94 	bl	8001e2c <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f06:	e00a      	b.n	8002f1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f08:	f7fe ff90 	bl	8001e2c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e0b5      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1e:	4b3e      	ldr	r3, [pc, #248]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1ee      	bne.n	8002f08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d105      	bne.n	8002f3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f30:	4b39      	ldr	r3, [pc, #228]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	4a38      	ldr	r2, [pc, #224]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80a1 	beq.w	8003088 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f46:	4b34      	ldr	r3, [pc, #208]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d05c      	beq.n	800300c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d141      	bne.n	8002fde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5a:	4b31      	ldr	r3, [pc, #196]	; (8003020 <HAL_RCC_OscConfig+0x478>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fe ff64 	bl	8001e2c <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f68:	f7fe ff60 	bl	8001e2c <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e087      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7a:	4b27      	ldr	r3, [pc, #156]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	019b      	lsls	r3, r3, #6
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	041b      	lsls	r3, r3, #16
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	491b      	ldr	r1, [pc, #108]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <HAL_RCC_OscConfig+0x478>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb6:	f7fe ff39 	bl	8001e2c <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7fe ff35 	bl	8001e2c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e05c      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd0:	4b11      	ldr	r3, [pc, #68]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x416>
 8002fdc:	e054      	b.n	8003088 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	4b10      	ldr	r3, [pc, #64]	; (8003020 <HAL_RCC_OscConfig+0x478>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe ff22 	bl	8001e2c <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fec:	f7fe ff1e 	bl	8001e2c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e045      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x444>
 800300a:	e03d      	b.n	8003088 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d107      	bne.n	8003024 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e038      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
 8003018:	40023800 	.word	0x40023800
 800301c:	40007000 	.word	0x40007000
 8003020:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003024:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_RCC_OscConfig+0x4ec>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d028      	beq.n	8003084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d121      	bne.n	8003084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d11a      	bne.n	8003084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003054:	4013      	ands	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800305a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800305c:	4293      	cmp	r3, r2
 800305e:	d111      	bne.n	8003084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	085b      	lsrs	r3, r3, #1
 800306c:	3b01      	subs	r3, #1
 800306e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003070:	429a      	cmp	r2, r3
 8003072:	d107      	bne.n	8003084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800

08003098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0cc      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030ac:	4b68      	ldr	r3, [pc, #416]	; (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d90c      	bls.n	80030d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b65      	ldr	r3, [pc, #404]	; (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c2:	4b63      	ldr	r3, [pc, #396]	; (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d001      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0b8      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d020      	beq.n	8003122 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ec:	4b59      	ldr	r3, [pc, #356]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4a58      	ldr	r2, [pc, #352]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003104:	4b53      	ldr	r3, [pc, #332]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	4a52      	ldr	r2, [pc, #328]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800310e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003110:	4b50      	ldr	r3, [pc, #320]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	494d      	ldr	r1, [pc, #308]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	4313      	orrs	r3, r2
 8003120:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d044      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d107      	bne.n	8003146 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	4b47      	ldr	r3, [pc, #284]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d119      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e07f      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d003      	beq.n	8003156 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003152:	2b03      	cmp	r3, #3
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003156:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e06f      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003166:	4b3b      	ldr	r3, [pc, #236]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e067      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003176:	4b37      	ldr	r3, [pc, #220]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f023 0203 	bic.w	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4934      	ldr	r1, [pc, #208]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	4313      	orrs	r3, r2
 8003186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003188:	f7fe fe50 	bl	8001e2c <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003190:	f7fe fe4c 	bl	8001e2c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e04f      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	4b2b      	ldr	r3, [pc, #172]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 020c 	and.w	r2, r3, #12
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d1eb      	bne.n	8003190 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031b8:	4b25      	ldr	r3, [pc, #148]	; (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d20c      	bcs.n	80031e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b22      	ldr	r3, [pc, #136]	; (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ce:	4b20      	ldr	r3, [pc, #128]	; (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e032      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d008      	beq.n	80031fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ec:	4b19      	ldr	r3, [pc, #100]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	4916      	ldr	r1, [pc, #88]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d009      	beq.n	800321e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800320a:	4b12      	ldr	r3, [pc, #72]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	490e      	ldr	r1, [pc, #56]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800321e:	f000 f821 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8003222:	4602      	mov	r2, r0
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	490a      	ldr	r1, [pc, #40]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 8003230:	5ccb      	ldrb	r3, [r1, r3]
 8003232:	fa22 f303 	lsr.w	r3, r2, r3
 8003236:	4a09      	ldr	r2, [pc, #36]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800323a:	4b09      	ldr	r3, [pc, #36]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe fdb0 	bl	8001da4 <HAL_InitTick>

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40023c00 	.word	0x40023c00
 8003254:	40023800 	.word	0x40023800
 8003258:	08004878 	.word	0x08004878
 800325c:	20000000 	.word	0x20000000
 8003260:	20000004 	.word	0x20000004

08003264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003268:	b094      	sub	sp, #80	; 0x50
 800326a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	647b      	str	r3, [r7, #68]	; 0x44
 8003270:	2300      	movs	r3, #0
 8003272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003274:	2300      	movs	r3, #0
 8003276:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800327c:	4b79      	ldr	r3, [pc, #484]	; (8003464 <HAL_RCC_GetSysClockFreq+0x200>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b08      	cmp	r3, #8
 8003286:	d00d      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003288:	2b08      	cmp	r3, #8
 800328a:	f200 80e1 	bhi.w	8003450 <HAL_RCC_GetSysClockFreq+0x1ec>
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x34>
 8003292:	2b04      	cmp	r3, #4
 8003294:	d003      	beq.n	800329e <HAL_RCC_GetSysClockFreq+0x3a>
 8003296:	e0db      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003298:	4b73      	ldr	r3, [pc, #460]	; (8003468 <HAL_RCC_GetSysClockFreq+0x204>)
 800329a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800329c:	e0db      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800329e:	4b73      	ldr	r3, [pc, #460]	; (800346c <HAL_RCC_GetSysClockFreq+0x208>)
 80032a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032a2:	e0d8      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a4:	4b6f      	ldr	r3, [pc, #444]	; (8003464 <HAL_RCC_GetSysClockFreq+0x200>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ae:	4b6d      	ldr	r3, [pc, #436]	; (8003464 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d063      	beq.n	8003382 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ba:	4b6a      	ldr	r3, [pc, #424]	; (8003464 <HAL_RCC_GetSysClockFreq+0x200>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	099b      	lsrs	r3, r3, #6
 80032c0:	2200      	movs	r2, #0
 80032c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80032c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032cc:	633b      	str	r3, [r7, #48]	; 0x30
 80032ce:	2300      	movs	r3, #0
 80032d0:	637b      	str	r3, [r7, #52]	; 0x34
 80032d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032d6:	4622      	mov	r2, r4
 80032d8:	462b      	mov	r3, r5
 80032da:	f04f 0000 	mov.w	r0, #0
 80032de:	f04f 0100 	mov.w	r1, #0
 80032e2:	0159      	lsls	r1, r3, #5
 80032e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032e8:	0150      	lsls	r0, r2, #5
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4621      	mov	r1, r4
 80032f0:	1a51      	subs	r1, r2, r1
 80032f2:	6139      	str	r1, [r7, #16]
 80032f4:	4629      	mov	r1, r5
 80032f6:	eb63 0301 	sbc.w	r3, r3, r1
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003308:	4659      	mov	r1, fp
 800330a:	018b      	lsls	r3, r1, #6
 800330c:	4651      	mov	r1, sl
 800330e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003312:	4651      	mov	r1, sl
 8003314:	018a      	lsls	r2, r1, #6
 8003316:	4651      	mov	r1, sl
 8003318:	ebb2 0801 	subs.w	r8, r2, r1
 800331c:	4659      	mov	r1, fp
 800331e:	eb63 0901 	sbc.w	r9, r3, r1
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800332e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003336:	4690      	mov	r8, r2
 8003338:	4699      	mov	r9, r3
 800333a:	4623      	mov	r3, r4
 800333c:	eb18 0303 	adds.w	r3, r8, r3
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	462b      	mov	r3, r5
 8003344:	eb49 0303 	adc.w	r3, r9, r3
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003356:	4629      	mov	r1, r5
 8003358:	024b      	lsls	r3, r1, #9
 800335a:	4621      	mov	r1, r4
 800335c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003360:	4621      	mov	r1, r4
 8003362:	024a      	lsls	r2, r1, #9
 8003364:	4610      	mov	r0, r2
 8003366:	4619      	mov	r1, r3
 8003368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336a:	2200      	movs	r2, #0
 800336c:	62bb      	str	r3, [r7, #40]	; 0x28
 800336e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003370:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003374:	f7fd fb4e 	bl	8000a14 <__aeabi_uldivmod>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4613      	mov	r3, r2
 800337e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003380:	e058      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003382:	4b38      	ldr	r3, [pc, #224]	; (8003464 <HAL_RCC_GetSysClockFreq+0x200>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	099b      	lsrs	r3, r3, #6
 8003388:	2200      	movs	r2, #0
 800338a:	4618      	mov	r0, r3
 800338c:	4611      	mov	r1, r2
 800338e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003392:	623b      	str	r3, [r7, #32]
 8003394:	2300      	movs	r3, #0
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
 8003398:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800339c:	4642      	mov	r2, r8
 800339e:	464b      	mov	r3, r9
 80033a0:	f04f 0000 	mov.w	r0, #0
 80033a4:	f04f 0100 	mov.w	r1, #0
 80033a8:	0159      	lsls	r1, r3, #5
 80033aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ae:	0150      	lsls	r0, r2, #5
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4641      	mov	r1, r8
 80033b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80033ba:	4649      	mov	r1, r9
 80033bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033d4:	ebb2 040a 	subs.w	r4, r2, sl
 80033d8:	eb63 050b 	sbc.w	r5, r3, fp
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	00eb      	lsls	r3, r5, #3
 80033e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ea:	00e2      	lsls	r2, r4, #3
 80033ec:	4614      	mov	r4, r2
 80033ee:	461d      	mov	r5, r3
 80033f0:	4643      	mov	r3, r8
 80033f2:	18e3      	adds	r3, r4, r3
 80033f4:	603b      	str	r3, [r7, #0]
 80033f6:	464b      	mov	r3, r9
 80033f8:	eb45 0303 	adc.w	r3, r5, r3
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	e9d7 4500 	ldrd	r4, r5, [r7]
 800340a:	4629      	mov	r1, r5
 800340c:	028b      	lsls	r3, r1, #10
 800340e:	4621      	mov	r1, r4
 8003410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003414:	4621      	mov	r1, r4
 8003416:	028a      	lsls	r2, r1, #10
 8003418:	4610      	mov	r0, r2
 800341a:	4619      	mov	r1, r3
 800341c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800341e:	2200      	movs	r2, #0
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	61fa      	str	r2, [r7, #28]
 8003424:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003428:	f7fd faf4 	bl	8000a14 <__aeabi_uldivmod>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4613      	mov	r3, r2
 8003432:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_GetSysClockFreq+0x200>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	0c1b      	lsrs	r3, r3, #16
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	3301      	adds	r3, #1
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003444:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003448:	fbb2 f3f3 	udiv	r3, r2, r3
 800344c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800344e:	e002      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCC_GetSysClockFreq+0x204>)
 8003452:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003458:	4618      	mov	r0, r3
 800345a:	3750      	adds	r7, #80	; 0x50
 800345c:	46bd      	mov	sp, r7
 800345e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800
 8003468:	00f42400 	.word	0x00f42400
 800346c:	007a1200 	.word	0x007a1200

08003470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_RCC_GetHCLKFreq+0x14>)
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000000 	.word	0x20000000

08003488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800348c:	f7ff fff0 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 8003490:	4602      	mov	r2, r0
 8003492:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	0a9b      	lsrs	r3, r3, #10
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	4903      	ldr	r1, [pc, #12]	; (80034ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800349e:	5ccb      	ldrb	r3, [r1, r3]
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40023800 	.word	0x40023800
 80034ac:	08004888 	.word	0x08004888

080034b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034b4:	f7ff ffdc 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 80034b8:	4602      	mov	r2, r0
 80034ba:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	0b5b      	lsrs	r3, r3, #13
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	4903      	ldr	r1, [pc, #12]	; (80034d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034c6:	5ccb      	ldrb	r3, [r1, r3]
 80034c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40023800 	.word	0x40023800
 80034d4:	08004888 	.word	0x08004888

080034d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e07b      	b.n	80035e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d108      	bne.n	8003504 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034fa:	d009      	beq.n	8003510 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	61da      	str	r2, [r3, #28]
 8003502:	e005      	b.n	8003510 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fe f9be 	bl	80018ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003546:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003594:	ea42 0103 	orr.w	r1, r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	f003 0104 	and.w	r1, r3, #4
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	f003 0210 	and.w	r2, r3, #16
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e03f      	b.n	800367c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d106      	bne.n	8003616 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7fe f9b3 	bl	800197c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2224      	movs	r2, #36	; 0x24
 800361a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800362c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fe68 	bl	8004304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003642:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003652:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003662:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	4613      	mov	r3, r2
 8003690:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b20      	cmp	r3, #32
 800369c:	d11d      	bne.n	80036da <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <HAL_UART_Receive_DMA+0x26>
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e016      	b.n	80036dc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_UART_Receive_DMA+0x38>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e00f      	b.n	80036dc <HAL_UART_Receive_DMA+0x58>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	461a      	mov	r2, r3
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fbb7 	bl	8003e44 <UART_Start_Receive_DMA>
 80036d6:	4603      	mov	r3, r0
 80036d8:	e000      	b.n	80036dc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80036da:	2302      	movs	r3, #2
  }
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b0ba      	sub	sp, #232	; 0xe8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800370a:	2300      	movs	r3, #0
 800370c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003710:	2300      	movs	r3, #0
 8003712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003722:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10f      	bne.n	800374a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800372a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <HAL_UART_IRQHandler+0x66>
 8003736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fd23 	bl	800418e <UART_Receive_IT>
      return;
 8003748:	e256      	b.n	8003bf8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800374a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80de 	beq.w	8003910 <HAL_UART_IRQHandler+0x22c>
 8003754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d106      	bne.n	800376e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003764:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80d1 	beq.w	8003910 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800376e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <HAL_UART_IRQHandler+0xae>
 800377a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800377e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f043 0201 	orr.w	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <HAL_UART_IRQHandler+0xd2>
 800379e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f043 0202 	orr.w	r2, r3, #2
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00b      	beq.n	80037da <HAL_UART_IRQHandler+0xf6>
 80037c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f043 0204 	orr.w	r2, r3, #4
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d011      	beq.n	800380a <HAL_UART_IRQHandler+0x126>
 80037e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d105      	bne.n	80037fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f043 0208 	orr.w	r2, r3, #8
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 81ed 	beq.w	8003bee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_UART_IRQHandler+0x14e>
 8003820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fcae 	bl	800418e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d103      	bne.n	800385e <HAL_UART_IRQHandler+0x17a>
 8003856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800385a:	2b00      	cmp	r3, #0
 800385c:	d04f      	beq.n	80038fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fbb6 	bl	8003fd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386e:	2b40      	cmp	r3, #64	; 0x40
 8003870:	d141      	bne.n	80038f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3314      	adds	r3, #20
 8003878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003888:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800388c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3314      	adds	r3, #20
 800389a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800389e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1d9      	bne.n	8003872 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d013      	beq.n	80038ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	4a7d      	ldr	r2, [pc, #500]	; (8003ac0 <HAL_UART_IRQHandler+0x3dc>)
 80038cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe fd3e 	bl	8002354 <HAL_DMA_Abort_IT>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d016      	beq.n	800390c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038e8:	4610      	mov	r0, r2
 80038ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	e00e      	b.n	800390c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f99a 	bl	8003c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f4:	e00a      	b.n	800390c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f996 	bl	8003c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	e006      	b.n	800390c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f992 	bl	8003c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800390a:	e170      	b.n	8003bee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390c:	bf00      	nop
    return;
 800390e:	e16e      	b.n	8003bee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	2b01      	cmp	r3, #1
 8003916:	f040 814a 	bne.w	8003bae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800391a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 8143 	beq.w	8003bae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 813c 	beq.w	8003bae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003936:	2300      	movs	r3, #0
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	f040 80b4 	bne.w	8003ac4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003968:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8140 	beq.w	8003bf2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003976:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800397a:	429a      	cmp	r2, r3
 800397c:	f080 8139 	bcs.w	8003bf2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003986:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003992:	f000 8088 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	330c      	adds	r3, #12
 800399c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	330c      	adds	r3, #12
 80039be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1d9      	bne.n	8003996 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3314      	adds	r3, #20
 80039e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039f4:	f023 0301 	bic.w	r3, r3, #1
 80039f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3314      	adds	r3, #20
 8003a02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e1      	bne.n	80039e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3314      	adds	r3, #20
 8003a24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3314      	adds	r3, #20
 8003a3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a4a:	e841 2300 	strex	r3, r2, [r1]
 8003a4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e3      	bne.n	8003a1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	330c      	adds	r3, #12
 8003a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a76:	f023 0310 	bic.w	r3, r3, #16
 8003a7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	330c      	adds	r3, #12
 8003a84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a88:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a90:	e841 2300 	strex	r3, r2, [r1]
 8003a94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e3      	bne.n	8003a64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fe fbe7 	bl	8002274 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f8c0 	bl	8003c3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003abc:	e099      	b.n	8003bf2 <HAL_UART_IRQHandler+0x50e>
 8003abe:	bf00      	nop
 8003ac0:	08004097 	.word	0x08004097
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 808b 	beq.w	8003bf6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8086 	beq.w	8003bf6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	330c      	adds	r3, #12
 8003b0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b0e:	647a      	str	r2, [r7, #68]	; 0x44
 8003b10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e3      	bne.n	8003aea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3314      	adds	r3, #20
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	623b      	str	r3, [r7, #32]
   return(result);
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3314      	adds	r3, #20
 8003b42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b46:	633a      	str	r2, [r7, #48]	; 0x30
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e3      	bne.n	8003b22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	330c      	adds	r3, #12
 8003b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0310 	bic.w	r3, r3, #16
 8003b7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	330c      	adds	r3, #12
 8003b88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b8c:	61fa      	str	r2, [r7, #28]
 8003b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	69b9      	ldr	r1, [r7, #24]
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	617b      	str	r3, [r7, #20]
   return(result);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e3      	bne.n	8003b68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ba0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f848 	bl	8003c3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bac:	e023      	b.n	8003bf6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <HAL_UART_IRQHandler+0x4ea>
 8003bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fa79 	bl	80040be <UART_Transmit_IT>
    return;
 8003bcc:	e014      	b.n	8003bf8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00e      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x514>
 8003bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fab9 	bl	800415e <UART_EndTransmit_IT>
    return;
 8003bec:	e004      	b.n	8003bf8 <HAL_UART_IRQHandler+0x514>
    return;
 8003bee:	bf00      	nop
 8003bf0:	e002      	b.n	8003bf8 <HAL_UART_IRQHandler+0x514>
      return;
 8003bf2:	bf00      	nop
 8003bf4:	e000      	b.n	8003bf8 <HAL_UART_IRQHandler+0x514>
      return;
 8003bf6:	bf00      	nop
  }
}
 8003bf8:	37e8      	adds	r7, #232	; 0xe8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop

08003c00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b09c      	sub	sp, #112	; 0x70
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d172      	bne.n	8003d56 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c72:	2200      	movs	r2, #0
 8003c74:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	330c      	adds	r3, #12
 8003c94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c96:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c98:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e5      	bne.n	8003c76 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3314      	adds	r3, #20
 8003cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cbc:	f023 0301 	bic.w	r3, r3, #1
 8003cc0:	667b      	str	r3, [r7, #100]	; 0x64
 8003cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3314      	adds	r3, #20
 8003cc8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003cca:	647a      	str	r2, [r7, #68]	; 0x44
 8003ccc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1e5      	bne.n	8003caa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3314      	adds	r3, #20
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	623b      	str	r3, [r7, #32]
   return(result);
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf4:	663b      	str	r3, [r7, #96]	; 0x60
 8003cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3314      	adds	r3, #20
 8003cfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cfe:	633a      	str	r2, [r7, #48]	; 0x30
 8003d00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e5      	bne.n	8003cde <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d119      	bne.n	8003d56 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	330c      	adds	r3, #12
 8003d28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f023 0310 	bic.w	r3, r3, #16
 8003d38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d42:	61fa      	str	r2, [r7, #28]
 8003d44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	69b9      	ldr	r1, [r7, #24]
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	617b      	str	r3, [r7, #20]
   return(result);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e5      	bne.n	8003d22 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d106      	bne.n	8003d6c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d62:	4619      	mov	r1, r3
 8003d64:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003d66:	f7ff ff69 	bl	8003c3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d6a:	e002      	b.n	8003d72 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003d6c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003d6e:	f7fd f9eb 	bl	8001148 <HAL_UART_RxCpltCallback>
}
 8003d72:	bf00      	nop
 8003d74:	3770      	adds	r7, #112	; 0x70
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d108      	bne.n	8003da2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	4619      	mov	r1, r3
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7ff ff4e 	bl	8003c3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003da0:	e002      	b.n	8003da8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f7ff ff36 	bl	8003c14 <HAL_UART_RxHalfCpltCallback>
}
 8003da8:	bf00      	nop
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dcc:	2b80      	cmp	r3, #128	; 0x80
 8003dce:	bf0c      	ite	eq
 8003dd0:	2301      	moveq	r3, #1
 8003dd2:	2300      	movne	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b21      	cmp	r3, #33	; 0x21
 8003de2:	d108      	bne.n	8003df6 <UART_DMAError+0x46>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2200      	movs	r2, #0
 8003dee:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003df0:	68b8      	ldr	r0, [r7, #8]
 8003df2:	f000 f8c5 	bl	8003f80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	bf0c      	ite	eq
 8003e04:	2301      	moveq	r3, #1
 8003e06:	2300      	movne	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b22      	cmp	r3, #34	; 0x22
 8003e16:	d108      	bne.n	8003e2a <UART_DMAError+0x7a>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2200      	movs	r2, #0
 8003e22:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003e24:	68b8      	ldr	r0, [r7, #8]
 8003e26:	f000 f8d3 	bl	8003fd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f043 0210 	orr.w	r2, r3, #16
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e36:	68b8      	ldr	r0, [r7, #8]
 8003e38:	f7ff fef6 	bl	8003c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e3c:	bf00      	nop
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b098      	sub	sp, #96	; 0x60
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	88fa      	ldrh	r2, [r7, #6]
 8003e5c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2222      	movs	r2, #34	; 0x22
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	4a40      	ldr	r2, [pc, #256]	; (8003f74 <UART_Start_Receive_DMA+0x130>)
 8003e72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	4a3f      	ldr	r2, [pc, #252]	; (8003f78 <UART_Start_Receive_DMA+0x134>)
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	4a3e      	ldr	r2, [pc, #248]	; (8003f7c <UART_Start_Receive_DMA+0x138>)
 8003e82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	2200      	movs	r2, #0
 8003e8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003e8c:	f107 0308 	add.w	r3, r7, #8
 8003e90:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	f7fe f98e 	bl	80021c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d019      	beq.n	8003f02 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	330c      	adds	r3, #12
 8003ed4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003eee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003ef0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003ef4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e5      	bne.n	8003ece <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3314      	adds	r3, #20
 8003f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	657b      	str	r3, [r7, #84]	; 0x54
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f22:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e5      	bne.n	8003f02 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3314      	adds	r3, #20
 8003f3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	617b      	str	r3, [r7, #20]
   return(result);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f4c:	653b      	str	r3, [r7, #80]	; 0x50
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3314      	adds	r3, #20
 8003f54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f56:	627a      	str	r2, [r7, #36]	; 0x24
 8003f58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	6a39      	ldr	r1, [r7, #32]
 8003f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e5      	bne.n	8003f36 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3760      	adds	r7, #96	; 0x60
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	08003c55 	.word	0x08003c55
 8003f78:	08003d7b 	.word	0x08003d7b
 8003f7c:	08003db1 	.word	0x08003db1

08003f80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b089      	sub	sp, #36	; 0x24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003f9e:	61fb      	str	r3, [r7, #28]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	69fa      	ldr	r2, [r7, #28]
 8003fa8:	61ba      	str	r2, [r7, #24]
 8003faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	6979      	ldr	r1, [r7, #20]
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e5      	bne.n	8003f88 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003fc4:	bf00      	nop
 8003fc6:	3724      	adds	r7, #36	; 0x24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b095      	sub	sp, #84	; 0x54
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	330c      	adds	r3, #12
 8003fde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	330c      	adds	r3, #12
 8003ff6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ff8:	643a      	str	r2, [r7, #64]	; 0x40
 8003ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ffe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e5      	bne.n	8003fd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3314      	adds	r3, #20
 8004012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	61fb      	str	r3, [r7, #28]
   return(result);
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	64bb      	str	r3, [r7, #72]	; 0x48
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3314      	adds	r3, #20
 800402a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800402c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e5      	bne.n	800400c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	2b01      	cmp	r3, #1
 8004046:	d119      	bne.n	800407c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	e853 3f00 	ldrex	r3, [r3]
 8004056:	60bb      	str	r3, [r7, #8]
   return(result);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f023 0310 	bic.w	r3, r3, #16
 800405e:	647b      	str	r3, [r7, #68]	; 0x44
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004068:	61ba      	str	r2, [r7, #24]
 800406a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	6979      	ldr	r1, [r7, #20]
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	613b      	str	r3, [r7, #16]
   return(result);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e5      	bne.n	8004048 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	631a      	str	r2, [r3, #48]	; 0x30
}
 800408a:	bf00      	nop
 800408c:	3754      	adds	r7, #84	; 0x54
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7ff fdb9 	bl	8003c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040b6:	bf00      	nop
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040be:	b480      	push	{r7}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b21      	cmp	r3, #33	; 0x21
 80040d0:	d13e      	bne.n	8004150 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040da:	d114      	bne.n	8004106 <UART_Transmit_IT+0x48>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d110      	bne.n	8004106 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	1c9a      	adds	r2, r3, #2
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	621a      	str	r2, [r3, #32]
 8004104:	e008      	b.n	8004118 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	1c59      	adds	r1, r3, #1
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6211      	str	r1, [r2, #32]
 8004110:	781a      	ldrb	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29b      	uxth	r3, r3
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	4619      	mov	r1, r3
 8004126:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10f      	bne.n	800414c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800413a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800414a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e000      	b.n	8004152 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004150:	2302      	movs	r3, #2
  }
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004174:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff fd3e 	bl	8003c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b08c      	sub	sp, #48	; 0x30
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b22      	cmp	r3, #34	; 0x22
 80041a0:	f040 80ab 	bne.w	80042fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ac:	d117      	bne.n	80041de <UART_Receive_IT+0x50>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d113      	bne.n	80041de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	1c9a      	adds	r2, r3, #2
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	629a      	str	r2, [r3, #40]	; 0x28
 80041dc:	e026      	b.n	800422c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f0:	d007      	beq.n	8004202 <UART_Receive_IT+0x74>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10a      	bne.n	8004210 <UART_Receive_IT+0x82>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	e008      	b.n	8004222 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800421c:	b2da      	uxtb	r2, r3
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29b      	uxth	r3, r3
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	4619      	mov	r1, r3
 800423a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800423c:	2b00      	cmp	r3, #0
 800423e:	d15a      	bne.n	80042f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0220 	bic.w	r2, r2, #32
 800424e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800425e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0201 	bic.w	r2, r2, #1
 800426e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	2b01      	cmp	r3, #1
 800427e:	d135      	bne.n	80042ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	330c      	adds	r3, #12
 800428c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	e853 3f00 	ldrex	r3, [r3]
 8004294:	613b      	str	r3, [r7, #16]
   return(result);
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f023 0310 	bic.w	r3, r3, #16
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	330c      	adds	r3, #12
 80042a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a6:	623a      	str	r2, [r7, #32]
 80042a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	69f9      	ldr	r1, [r7, #28]
 80042ac:	6a3a      	ldr	r2, [r7, #32]
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e5      	bne.n	8004286 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0310 	and.w	r3, r3, #16
 80042c4:	2b10      	cmp	r3, #16
 80042c6:	d10a      	bne.n	80042de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042e2:	4619      	mov	r1, r3
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff fca9 	bl	8003c3c <HAL_UARTEx_RxEventCallback>
 80042ea:	e002      	b.n	80042f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7fc ff2b 	bl	8001148 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e002      	b.n	80042fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	e000      	b.n	80042fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80042fa:	2302      	movs	r3, #2
  }
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3730      	adds	r7, #48	; 0x30
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004308:	b0c0      	sub	sp, #256	; 0x100
 800430a:	af00      	add	r7, sp, #0
 800430c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004320:	68d9      	ldr	r1, [r3, #12]
 8004322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	ea40 0301 	orr.w	r3, r0, r1
 800432c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800432e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	431a      	orrs	r2, r3
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	431a      	orrs	r2, r3
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800435c:	f021 010c 	bic.w	r1, r1, #12
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800436a:	430b      	orrs	r3, r1
 800436c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800437a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437e:	6999      	ldr	r1, [r3, #24]
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	ea40 0301 	orr.w	r3, r0, r1
 800438a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4b8f      	ldr	r3, [pc, #572]	; (80045d0 <UART_SetConfig+0x2cc>)
 8004394:	429a      	cmp	r2, r3
 8004396:	d005      	beq.n	80043a4 <UART_SetConfig+0xa0>
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4b8d      	ldr	r3, [pc, #564]	; (80045d4 <UART_SetConfig+0x2d0>)
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d104      	bne.n	80043ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043a4:	f7ff f884 	bl	80034b0 <HAL_RCC_GetPCLK2Freq>
 80043a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043ac:	e003      	b.n	80043b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043ae:	f7ff f86b 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 80043b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c0:	f040 810c 	bne.w	80045dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043c8:	2200      	movs	r2, #0
 80043ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043d6:	4622      	mov	r2, r4
 80043d8:	462b      	mov	r3, r5
 80043da:	1891      	adds	r1, r2, r2
 80043dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80043de:	415b      	adcs	r3, r3
 80043e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043e6:	4621      	mov	r1, r4
 80043e8:	eb12 0801 	adds.w	r8, r2, r1
 80043ec:	4629      	mov	r1, r5
 80043ee:	eb43 0901 	adc.w	r9, r3, r1
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004406:	4690      	mov	r8, r2
 8004408:	4699      	mov	r9, r3
 800440a:	4623      	mov	r3, r4
 800440c:	eb18 0303 	adds.w	r3, r8, r3
 8004410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004414:	462b      	mov	r3, r5
 8004416:	eb49 0303 	adc.w	r3, r9, r3
 800441a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800441e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800442a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800442e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004432:	460b      	mov	r3, r1
 8004434:	18db      	adds	r3, r3, r3
 8004436:	653b      	str	r3, [r7, #80]	; 0x50
 8004438:	4613      	mov	r3, r2
 800443a:	eb42 0303 	adc.w	r3, r2, r3
 800443e:	657b      	str	r3, [r7, #84]	; 0x54
 8004440:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004444:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004448:	f7fc fae4 	bl	8000a14 <__aeabi_uldivmod>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4b61      	ldr	r3, [pc, #388]	; (80045d8 <UART_SetConfig+0x2d4>)
 8004452:	fba3 2302 	umull	r2, r3, r3, r2
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	011c      	lsls	r4, r3, #4
 800445a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800445e:	2200      	movs	r2, #0
 8004460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004464:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004468:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800446c:	4642      	mov	r2, r8
 800446e:	464b      	mov	r3, r9
 8004470:	1891      	adds	r1, r2, r2
 8004472:	64b9      	str	r1, [r7, #72]	; 0x48
 8004474:	415b      	adcs	r3, r3
 8004476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004478:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800447c:	4641      	mov	r1, r8
 800447e:	eb12 0a01 	adds.w	sl, r2, r1
 8004482:	4649      	mov	r1, r9
 8004484:	eb43 0b01 	adc.w	fp, r3, r1
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004494:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800449c:	4692      	mov	sl, r2
 800449e:	469b      	mov	fp, r3
 80044a0:	4643      	mov	r3, r8
 80044a2:	eb1a 0303 	adds.w	r3, sl, r3
 80044a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044aa:	464b      	mov	r3, r9
 80044ac:	eb4b 0303 	adc.w	r3, fp, r3
 80044b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044c8:	460b      	mov	r3, r1
 80044ca:	18db      	adds	r3, r3, r3
 80044cc:	643b      	str	r3, [r7, #64]	; 0x40
 80044ce:	4613      	mov	r3, r2
 80044d0:	eb42 0303 	adc.w	r3, r2, r3
 80044d4:	647b      	str	r3, [r7, #68]	; 0x44
 80044d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044de:	f7fc fa99 	bl	8000a14 <__aeabi_uldivmod>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	4b3b      	ldr	r3, [pc, #236]	; (80045d8 <UART_SetConfig+0x2d4>)
 80044ea:	fba3 2301 	umull	r2, r3, r3, r1
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	2264      	movs	r2, #100	; 0x64
 80044f2:	fb02 f303 	mul.w	r3, r2, r3
 80044f6:	1acb      	subs	r3, r1, r3
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044fe:	4b36      	ldr	r3, [pc, #216]	; (80045d8 <UART_SetConfig+0x2d4>)
 8004500:	fba3 2302 	umull	r2, r3, r3, r2
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800450c:	441c      	add	r4, r3
 800450e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004512:	2200      	movs	r2, #0
 8004514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004518:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800451c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004520:	4642      	mov	r2, r8
 8004522:	464b      	mov	r3, r9
 8004524:	1891      	adds	r1, r2, r2
 8004526:	63b9      	str	r1, [r7, #56]	; 0x38
 8004528:	415b      	adcs	r3, r3
 800452a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800452c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004530:	4641      	mov	r1, r8
 8004532:	1851      	adds	r1, r2, r1
 8004534:	6339      	str	r1, [r7, #48]	; 0x30
 8004536:	4649      	mov	r1, r9
 8004538:	414b      	adcs	r3, r1
 800453a:	637b      	str	r3, [r7, #52]	; 0x34
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004548:	4659      	mov	r1, fp
 800454a:	00cb      	lsls	r3, r1, #3
 800454c:	4651      	mov	r1, sl
 800454e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004552:	4651      	mov	r1, sl
 8004554:	00ca      	lsls	r2, r1, #3
 8004556:	4610      	mov	r0, r2
 8004558:	4619      	mov	r1, r3
 800455a:	4603      	mov	r3, r0
 800455c:	4642      	mov	r2, r8
 800455e:	189b      	adds	r3, r3, r2
 8004560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004564:	464b      	mov	r3, r9
 8004566:	460a      	mov	r2, r1
 8004568:	eb42 0303 	adc.w	r3, r2, r3
 800456c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800457c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004580:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004584:	460b      	mov	r3, r1
 8004586:	18db      	adds	r3, r3, r3
 8004588:	62bb      	str	r3, [r7, #40]	; 0x28
 800458a:	4613      	mov	r3, r2
 800458c:	eb42 0303 	adc.w	r3, r2, r3
 8004590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004592:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004596:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800459a:	f7fc fa3b 	bl	8000a14 <__aeabi_uldivmod>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <UART_SetConfig+0x2d4>)
 80045a4:	fba3 1302 	umull	r1, r3, r3, r2
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	2164      	movs	r1, #100	; 0x64
 80045ac:	fb01 f303 	mul.w	r3, r1, r3
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	3332      	adds	r3, #50	; 0x32
 80045b6:	4a08      	ldr	r2, [pc, #32]	; (80045d8 <UART_SetConfig+0x2d4>)
 80045b8:	fba2 2303 	umull	r2, r3, r2, r3
 80045bc:	095b      	lsrs	r3, r3, #5
 80045be:	f003 0207 	and.w	r2, r3, #7
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4422      	add	r2, r4
 80045ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045cc:	e105      	b.n	80047da <UART_SetConfig+0x4d6>
 80045ce:	bf00      	nop
 80045d0:	40011000 	.word	0x40011000
 80045d4:	40011400 	.word	0x40011400
 80045d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e0:	2200      	movs	r2, #0
 80045e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045ee:	4642      	mov	r2, r8
 80045f0:	464b      	mov	r3, r9
 80045f2:	1891      	adds	r1, r2, r2
 80045f4:	6239      	str	r1, [r7, #32]
 80045f6:	415b      	adcs	r3, r3
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
 80045fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045fe:	4641      	mov	r1, r8
 8004600:	1854      	adds	r4, r2, r1
 8004602:	4649      	mov	r1, r9
 8004604:	eb43 0501 	adc.w	r5, r3, r1
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	00eb      	lsls	r3, r5, #3
 8004612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004616:	00e2      	lsls	r2, r4, #3
 8004618:	4614      	mov	r4, r2
 800461a:	461d      	mov	r5, r3
 800461c:	4643      	mov	r3, r8
 800461e:	18e3      	adds	r3, r4, r3
 8004620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004624:	464b      	mov	r3, r9
 8004626:	eb45 0303 	adc.w	r3, r5, r3
 800462a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800462e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800463a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800464a:	4629      	mov	r1, r5
 800464c:	008b      	lsls	r3, r1, #2
 800464e:	4621      	mov	r1, r4
 8004650:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004654:	4621      	mov	r1, r4
 8004656:	008a      	lsls	r2, r1, #2
 8004658:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800465c:	f7fc f9da 	bl	8000a14 <__aeabi_uldivmod>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4b60      	ldr	r3, [pc, #384]	; (80047e8 <UART_SetConfig+0x4e4>)
 8004666:	fba3 2302 	umull	r2, r3, r3, r2
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	011c      	lsls	r4, r3, #4
 800466e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004672:	2200      	movs	r2, #0
 8004674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004678:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800467c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004680:	4642      	mov	r2, r8
 8004682:	464b      	mov	r3, r9
 8004684:	1891      	adds	r1, r2, r2
 8004686:	61b9      	str	r1, [r7, #24]
 8004688:	415b      	adcs	r3, r3
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004690:	4641      	mov	r1, r8
 8004692:	1851      	adds	r1, r2, r1
 8004694:	6139      	str	r1, [r7, #16]
 8004696:	4649      	mov	r1, r9
 8004698:	414b      	adcs	r3, r1
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046a8:	4659      	mov	r1, fp
 80046aa:	00cb      	lsls	r3, r1, #3
 80046ac:	4651      	mov	r1, sl
 80046ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046b2:	4651      	mov	r1, sl
 80046b4:	00ca      	lsls	r2, r1, #3
 80046b6:	4610      	mov	r0, r2
 80046b8:	4619      	mov	r1, r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	4642      	mov	r2, r8
 80046be:	189b      	adds	r3, r3, r2
 80046c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046c4:	464b      	mov	r3, r9
 80046c6:	460a      	mov	r2, r1
 80046c8:	eb42 0303 	adc.w	r3, r2, r3
 80046cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80046da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046e8:	4649      	mov	r1, r9
 80046ea:	008b      	lsls	r3, r1, #2
 80046ec:	4641      	mov	r1, r8
 80046ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046f2:	4641      	mov	r1, r8
 80046f4:	008a      	lsls	r2, r1, #2
 80046f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046fa:	f7fc f98b 	bl	8000a14 <__aeabi_uldivmod>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4b39      	ldr	r3, [pc, #228]	; (80047e8 <UART_SetConfig+0x4e4>)
 8004704:	fba3 1302 	umull	r1, r3, r3, r2
 8004708:	095b      	lsrs	r3, r3, #5
 800470a:	2164      	movs	r1, #100	; 0x64
 800470c:	fb01 f303 	mul.w	r3, r1, r3
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	3332      	adds	r3, #50	; 0x32
 8004716:	4a34      	ldr	r2, [pc, #208]	; (80047e8 <UART_SetConfig+0x4e4>)
 8004718:	fba2 2303 	umull	r2, r3, r2, r3
 800471c:	095b      	lsrs	r3, r3, #5
 800471e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004722:	441c      	add	r4, r3
 8004724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004728:	2200      	movs	r2, #0
 800472a:	673b      	str	r3, [r7, #112]	; 0x70
 800472c:	677a      	str	r2, [r7, #116]	; 0x74
 800472e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004732:	4642      	mov	r2, r8
 8004734:	464b      	mov	r3, r9
 8004736:	1891      	adds	r1, r2, r2
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	415b      	adcs	r3, r3
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004742:	4641      	mov	r1, r8
 8004744:	1851      	adds	r1, r2, r1
 8004746:	6039      	str	r1, [r7, #0]
 8004748:	4649      	mov	r1, r9
 800474a:	414b      	adcs	r3, r1
 800474c:	607b      	str	r3, [r7, #4]
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800475a:	4659      	mov	r1, fp
 800475c:	00cb      	lsls	r3, r1, #3
 800475e:	4651      	mov	r1, sl
 8004760:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004764:	4651      	mov	r1, sl
 8004766:	00ca      	lsls	r2, r1, #3
 8004768:	4610      	mov	r0, r2
 800476a:	4619      	mov	r1, r3
 800476c:	4603      	mov	r3, r0
 800476e:	4642      	mov	r2, r8
 8004770:	189b      	adds	r3, r3, r2
 8004772:	66bb      	str	r3, [r7, #104]	; 0x68
 8004774:	464b      	mov	r3, r9
 8004776:	460a      	mov	r2, r1
 8004778:	eb42 0303 	adc.w	r3, r2, r3
 800477c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800477e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	663b      	str	r3, [r7, #96]	; 0x60
 8004788:	667a      	str	r2, [r7, #100]	; 0x64
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004796:	4649      	mov	r1, r9
 8004798:	008b      	lsls	r3, r1, #2
 800479a:	4641      	mov	r1, r8
 800479c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047a0:	4641      	mov	r1, r8
 80047a2:	008a      	lsls	r2, r1, #2
 80047a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047a8:	f7fc f934 	bl	8000a14 <__aeabi_uldivmod>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <UART_SetConfig+0x4e4>)
 80047b2:	fba3 1302 	umull	r1, r3, r3, r2
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	2164      	movs	r1, #100	; 0x64
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	3332      	adds	r3, #50	; 0x32
 80047c4:	4a08      	ldr	r2, [pc, #32]	; (80047e8 <UART_SetConfig+0x4e4>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	f003 020f 	and.w	r2, r3, #15
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4422      	add	r2, r4
 80047d8:	609a      	str	r2, [r3, #8]
}
 80047da:	bf00      	nop
 80047dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047e0:	46bd      	mov	sp, r7
 80047e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047e6:	bf00      	nop
 80047e8:	51eb851f 	.word	0x51eb851f

080047ec <__libc_init_array>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	4d0d      	ldr	r5, [pc, #52]	; (8004824 <__libc_init_array+0x38>)
 80047f0:	4c0d      	ldr	r4, [pc, #52]	; (8004828 <__libc_init_array+0x3c>)
 80047f2:	1b64      	subs	r4, r4, r5
 80047f4:	10a4      	asrs	r4, r4, #2
 80047f6:	2600      	movs	r6, #0
 80047f8:	42a6      	cmp	r6, r4
 80047fa:	d109      	bne.n	8004810 <__libc_init_array+0x24>
 80047fc:	4d0b      	ldr	r5, [pc, #44]	; (800482c <__libc_init_array+0x40>)
 80047fe:	4c0c      	ldr	r4, [pc, #48]	; (8004830 <__libc_init_array+0x44>)
 8004800:	f000 f82e 	bl	8004860 <_init>
 8004804:	1b64      	subs	r4, r4, r5
 8004806:	10a4      	asrs	r4, r4, #2
 8004808:	2600      	movs	r6, #0
 800480a:	42a6      	cmp	r6, r4
 800480c:	d105      	bne.n	800481a <__libc_init_array+0x2e>
 800480e:	bd70      	pop	{r4, r5, r6, pc}
 8004810:	f855 3b04 	ldr.w	r3, [r5], #4
 8004814:	4798      	blx	r3
 8004816:	3601      	adds	r6, #1
 8004818:	e7ee      	b.n	80047f8 <__libc_init_array+0xc>
 800481a:	f855 3b04 	ldr.w	r3, [r5], #4
 800481e:	4798      	blx	r3
 8004820:	3601      	adds	r6, #1
 8004822:	e7f2      	b.n	800480a <__libc_init_array+0x1e>
 8004824:	080048a0 	.word	0x080048a0
 8004828:	080048a0 	.word	0x080048a0
 800482c:	080048a0 	.word	0x080048a0
 8004830:	080048a4 	.word	0x080048a4

08004834 <memcpy>:
 8004834:	440a      	add	r2, r1
 8004836:	4291      	cmp	r1, r2
 8004838:	f100 33ff 	add.w	r3, r0, #4294967295
 800483c:	d100      	bne.n	8004840 <memcpy+0xc>
 800483e:	4770      	bx	lr
 8004840:	b510      	push	{r4, lr}
 8004842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800484a:	4291      	cmp	r1, r2
 800484c:	d1f9      	bne.n	8004842 <memcpy+0xe>
 800484e:	bd10      	pop	{r4, pc}

08004850 <memset>:
 8004850:	4402      	add	r2, r0
 8004852:	4603      	mov	r3, r0
 8004854:	4293      	cmp	r3, r2
 8004856:	d100      	bne.n	800485a <memset+0xa>
 8004858:	4770      	bx	lr
 800485a:	f803 1b01 	strb.w	r1, [r3], #1
 800485e:	e7f9      	b.n	8004854 <memset+0x4>

08004860 <_init>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	bf00      	nop
 8004864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004866:	bc08      	pop	{r3}
 8004868:	469e      	mov	lr, r3
 800486a:	4770      	bx	lr

0800486c <_fini>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	bf00      	nop
 8004870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004872:	bc08      	pop	{r3}
 8004874:	469e      	mov	lr, r3
 8004876:	4770      	bx	lr
